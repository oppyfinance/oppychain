// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: invoice/invoice.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InvoiceBase struct {
	Creator   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Name      string                                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Url       string                                        `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	Data      string                                        `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	OrigOwner github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=origOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"origOwner,omitempty"`
}

func (m *InvoiceBase) Reset()         { *m = InvoiceBase{} }
func (m *InvoiceBase) String() string { return proto.CompactTextString(m) }
func (*InvoiceBase) ProtoMessage()    {}
func (*InvoiceBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{0}
}
func (m *InvoiceBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceBase.Merge(m, src)
}
func (m *InvoiceBase) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceBase) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceBase.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceBase proto.InternalMessageInfo

func (m *InvoiceBase) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *InvoiceBase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *InvoiceBase) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *InvoiceBase) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *InvoiceBase) GetOrigOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.OrigOwner
	}
	return nil
}

type InvoiceFinance struct {
	Denom        string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	AmountLocked github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amountLocked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amountLocked"`
	Apy          float32                                `protobuf:"fixed32,5,opt,name=apy,proto3" json:"apy,omitempty"`
}

func (m *InvoiceFinance) Reset()         { *m = InvoiceFinance{} }
func (m *InvoiceFinance) String() string { return proto.CompactTextString(m) }
func (*InvoiceFinance) ProtoMessage()    {}
func (*InvoiceFinance) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{1}
}
func (m *InvoiceFinance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceFinance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceFinance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceFinance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceFinance.Merge(m, src)
}
func (m *InvoiceFinance) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceFinance) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceFinance.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceFinance proto.InternalMessageInfo

func (m *InvoiceFinance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *InvoiceFinance) GetApy() float32 {
	if m != nil {
		return m.Apy
	}
	return 0
}

type InvoiceMember struct {
	InvoiceID     string                                        `protobuf:"bytes,1,opt,name=invoiceID,proto3" json:"invoiceID,omitempty"`
	Share         github_com_cosmos_cosmos_sdk_types.Int        `protobuf:"bytes,2,opt,name=share,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"share"`
	InvoiceHolder github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=invoiceHolder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"invoiceHolder,omitempty"`
}

func (m *InvoiceMember) Reset()         { *m = InvoiceMember{} }
func (m *InvoiceMember) String() string { return proto.CompactTextString(m) }
func (*InvoiceMember) ProtoMessage()    {}
func (*InvoiceMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{2}
}
func (m *InvoiceMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvoiceMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvoiceMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InvoiceMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvoiceMember.Merge(m, src)
}
func (m *InvoiceMember) XXX_Size() int {
	return m.Size()
}
func (m *InvoiceMember) XXX_DiscardUnknown() {
	xxx_messageInfo_InvoiceMember.DiscardUnknown(m)
}

var xxx_messageInfo_InvoiceMember proto.InternalMessageInfo

func (m *InvoiceMember) GetInvoiceID() string {
	if m != nil {
		return m.InvoiceID
	}
	return ""
}

func (m *InvoiceMember) GetInvoiceHolder() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.InvoiceHolder
	}
	return nil
}

type Invoice struct {
	InvoiceID       string                                        `protobuf:"bytes,1,opt,name=invoiceID,proto3" json:"invoiceID,omitempty"`
	InvoiceBase     *InvoiceBase                                  `protobuf:"bytes,2,opt,name=invoiceBase,proto3" json:"invoiceBase,omitempty"`
	InvoiceFinance  *InvoiceFinance                               `protobuf:"bytes,3,opt,name=invoiceFinance,proto3" json:"invoiceFinance,omitempty"`
	CurrentOwner    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=currentOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"currentOwner,omitempty"`
	InvoiceMembers  []InvoiceMember                               `protobuf:"bytes,5,rep,name=invoiceMembers,proto3" json:"invoiceMembers"`
	RootOwner       bool                                          `protobuf:"varint,6,opt,name=rootOwner,proto3" json:"rootOwner,omitempty"`
	Deleted         bool                                          `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	IsListedForSell bool                                          `protobuf:"varint,8,opt,name=isListedForSell,proto3" json:"isListedForSell,omitempty"`
}

func (m *Invoice) Reset()         { *m = Invoice{} }
func (m *Invoice) String() string { return proto.CompactTextString(m) }
func (*Invoice) ProtoMessage()    {}
func (*Invoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3e2b5ce0fcadd51, []int{3}
}
func (m *Invoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Invoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Invoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Invoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Invoice.Merge(m, src)
}
func (m *Invoice) XXX_Size() int {
	return m.Size()
}
func (m *Invoice) XXX_DiscardUnknown() {
	xxx_messageInfo_Invoice.DiscardUnknown(m)
}

var xxx_messageInfo_Invoice proto.InternalMessageInfo

func (m *Invoice) GetInvoiceID() string {
	if m != nil {
		return m.InvoiceID
	}
	return ""
}

func (m *Invoice) GetInvoiceBase() *InvoiceBase {
	if m != nil {
		return m.InvoiceBase
	}
	return nil
}

func (m *Invoice) GetInvoiceFinance() *InvoiceFinance {
	if m != nil {
		return m.InvoiceFinance
	}
	return nil
}

func (m *Invoice) GetCurrentOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.CurrentOwner
	}
	return nil
}

func (m *Invoice) GetInvoiceMembers() []InvoiceMember {
	if m != nil {
		return m.InvoiceMembers
	}
	return nil
}

func (m *Invoice) GetRootOwner() bool {
	if m != nil {
		return m.RootOwner
	}
	return false
}

func (m *Invoice) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Invoice) GetIsListedForSell() bool {
	if m != nil {
		return m.IsListedForSell
	}
	return false
}

func init() {
	proto.RegisterType((*InvoiceBase)(nil), "oppyfinance.oppychain.invoice.InvoiceBase")
	proto.RegisterType((*InvoiceFinance)(nil), "oppyfinance.oppychain.invoice.InvoiceFinance")
	proto.RegisterType((*InvoiceMember)(nil), "oppyfinance.oppychain.invoice.InvoiceMember")
	proto.RegisterType((*Invoice)(nil), "oppyfinance.oppychain.invoice.Invoice")
}

func init() { proto.RegisterFile("invoice/invoice.proto", fileDescriptor_b3e2b5ce0fcadd51) }

var fileDescriptor_b3e2b5ce0fcadd51 = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x4f, 0x6f, 0x12, 0x41,
	0x14, 0x67, 0x0b, 0x94, 0xf2, 0xa0, 0xd5, 0x4c, 0x6a, 0xb2, 0x31, 0xba, 0x10, 0x0e, 0x86, 0x18,
	0xd9, 0x4d, 0xf1, 0x13, 0x94, 0x34, 0x44, 0x52, 0x4c, 0x93, 0x35, 0x8d, 0x49, 0x6f, 0xc3, 0xee,
	0x08, 0x93, 0xee, 0xee, 0x90, 0x99, 0x41, 0xe5, 0x5b, 0xf8, 0xb1, 0x7a, 0xf0, 0xd0, 0x83, 0x07,
	0xe3, 0x81, 0x28, 0xc4, 0x2f, 0xe1, 0xc9, 0xcc, 0x1f, 0x4a, 0xe1, 0xa0, 0x94, 0xd3, 0xbc, 0x79,
	0xbc, 0xf7, 0xe3, 0xf7, 0xfb, 0xbd, 0xb7, 0x03, 0x4f, 0x68, 0xf6, 0x91, 0xd1, 0x88, 0x04, 0xf6,
	0xf4, 0xc7, 0x9c, 0x49, 0x86, 0x9e, 0xb3, 0xf1, 0x78, 0xfa, 0x81, 0x66, 0x38, 0x8b, 0x88, 0xaf,
	0xe2, 0x68, 0x84, 0x69, 0xe6, 0xdb, 0xa2, 0xa7, 0xc7, 0x43, 0x36, 0x64, 0xba, 0x32, 0x50, 0x91,
	0x69, 0x6a, 0xfc, 0x76, 0xa0, 0xd2, 0x33, 0x15, 0x1d, 0x2c, 0x08, 0x3a, 0x87, 0x52, 0xc4, 0x09,
	0x96, 0x8c, 0xbb, 0x4e, 0xdd, 0x69, 0x56, 0x3b, 0x27, 0x7f, 0x66, 0xb5, 0xd6, 0x90, 0xca, 0xd1,
	0x64, 0xe0, 0x47, 0x2c, 0x0d, 0x22, 0x26, 0x52, 0x26, 0xec, 0xd1, 0x12, 0xf1, 0x75, 0x20, 0xa7,
	0x63, 0x22, 0xfc, 0xd3, 0x28, 0x3a, 0x8d, 0x63, 0x4e, 0x84, 0x08, 0x97, 0x08, 0x08, 0x41, 0x21,
	0xc3, 0x29, 0x71, 0xf7, 0xea, 0x4e, 0xb3, 0x1c, 0xea, 0x18, 0x3d, 0x86, 0xfc, 0x84, 0x27, 0x6e,
	0x5e, 0xa7, 0x54, 0xa8, 0xaa, 0x62, 0x2c, 0xb1, 0x5b, 0x30, 0x55, 0x2a, 0x46, 0x17, 0x50, 0x66,
	0x9c, 0x0e, 0x2f, 0x3e, 0x65, 0x84, 0xbb, 0xc5, 0x5d, 0x89, 0xac, 0x30, 0x1a, 0xdf, 0x1c, 0x38,
	0xb2, 0x3a, 0xbb, 0xc6, 0x22, 0x74, 0x0c, 0xc5, 0x98, 0x64, 0x2c, 0xb5, 0xf4, 0xcc, 0x05, 0x75,
	0x61, 0x1f, 0xa7, 0x6c, 0x92, 0x49, 0x4d, 0xb1, 0xda, 0xf1, 0x6f, 0x66, 0xb5, 0xdc, 0x8f, 0x59,
	0xed, 0xc5, 0x16, 0x7f, 0xdd, 0xcb, 0x64, 0x68, 0xbb, 0x51, 0x08, 0x55, 0x13, 0xf5, 0x59, 0x74,
	0x4d, 0x62, 0xad, 0xee, 0xe1, 0x68, 0x6b, 0x18, 0xca, 0x3b, 0x3c, 0x9e, 0x6a, 0x3f, 0xf6, 0x42,
	0x15, 0x36, 0xbe, 0x3a, 0x70, 0x68, 0x65, 0xbd, 0x25, 0xe9, 0x80, 0x70, 0xf4, 0x0c, 0xca, 0x76,
	0xe2, 0xbd, 0x33, 0x3d, 0xc2, 0x72, 0xb8, 0x4a, 0xa0, 0x33, 0x28, 0x8a, 0x11, 0xe6, 0x66, 0x24,
	0x0f, 0xa7, 0x63, 0x9a, 0xd1, 0x7b, 0x38, 0xb4, 0x90, 0x6f, 0x58, 0x12, 0x13, 0x6e, 0xad, 0xda,
	0x61, 0x42, 0xeb, 0x38, 0x8d, 0x5f, 0x79, 0x28, 0x59, 0x39, 0xff, 0x11, 0xd2, 0x87, 0x0a, 0x5d,
	0xad, 0xad, 0x96, 0x53, 0x69, 0xbf, 0xf4, 0xff, 0xf9, 0x09, 0xf8, 0xf7, 0x16, 0x3d, 0xbc, 0xdf,
	0x8e, 0x2e, 0xe1, 0x88, 0xae, 0x2d, 0x87, 0x56, 0x54, 0x69, 0xb7, 0xb6, 0x03, 0xb4, 0x4d, 0xe1,
	0x06, 0x08, 0xba, 0x84, 0x6a, 0x34, 0xe1, 0x9c, 0x64, 0xd2, 0x2c, 0x72, 0x61, 0x57, 0x9b, 0xd6,
	0x60, 0xd0, 0xd5, 0x1d, 0x5b, 0x33, 0x73, 0xe1, 0x16, 0xeb, 0xf9, 0x66, 0xa5, 0xfd, 0x6a, 0x3b,
	0xb6, 0xa6, 0xa9, 0x53, 0x50, 0xb3, 0x0f, 0x37, 0x90, 0x94, 0xeb, 0x9c, 0x31, 0xcb, 0x77, 0xbf,
	0xee, 0x34, 0x0f, 0xc2, 0x55, 0x02, 0xb9, 0x50, 0x8a, 0x49, 0x42, 0x24, 0x89, 0xdd, 0x92, 0xfe,
	0x6d, 0x79, 0x45, 0x4d, 0x78, 0x44, 0x45, 0x9f, 0x0a, 0x49, 0xe2, 0x2e, 0xe3, 0xef, 0x48, 0x92,
	0xb8, 0x07, 0xba, 0x62, 0x33, 0xdd, 0x39, 0xbf, 0x99, 0x7b, 0xce, 0xed, 0xdc, 0x73, 0x7e, 0xce,
	0x3d, 0xe7, 0xcb, 0xc2, 0xcb, 0xdd, 0x2e, 0xbc, 0xdc, 0xf7, 0x85, 0x97, 0xbb, 0x3a, 0x19, 0x52,
	0x99, 0x60, 0x63, 0x8a, 0x62, 0xdf, 0xb2, 0x52, 0x82, 0x3b, 0x29, 0xc1, 0xe7, 0xe5, 0x9b, 0x67,
	0x3c, 0x1a, 0xec, 0xeb, 0x57, 0xec, 0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x72, 0x68,
	0x01, 0x13, 0x05, 0x00, 0x00,
}

func (m *InvoiceBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrigOwner) > 0 {
		i -= len(m.OrigOwner)
		copy(dAtA[i:], m.OrigOwner)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.OrigOwner)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceFinance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceFinance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceFinance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Apy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Apy))))
		i--
		dAtA[i] = 0x2d
	}
	{
		size := m.AmountLocked.Size()
		i -= size
		if _, err := m.AmountLocked.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvoice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvoice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *InvoiceMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvoiceMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InvoiceMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.InvoiceHolder) > 0 {
		i -= len(m.InvoiceHolder)
		copy(dAtA[i:], m.InvoiceHolder)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.InvoiceHolder)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Share.Size()
		i -= size
		if _, err := m.Share.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInvoice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.InvoiceID) > 0 {
		i -= len(m.InvoiceID)
		copy(dAtA[i:], m.InvoiceID)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.InvoiceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Invoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Invoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Invoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsListedForSell {
		i--
		if m.IsListedForSell {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Deleted {
		i--
		if m.Deleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.RootOwner {
		i--
		if m.RootOwner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.InvoiceMembers) > 0 {
		for iNdEx := len(m.InvoiceMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InvoiceMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInvoice(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.CurrentOwner) > 0 {
		i -= len(m.CurrentOwner)
		copy(dAtA[i:], m.CurrentOwner)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.CurrentOwner)))
		i--
		dAtA[i] = 0x22
	}
	if m.InvoiceFinance != nil {
		{
			size, err := m.InvoiceFinance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInvoice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.InvoiceBase != nil {
		{
			size, err := m.InvoiceBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInvoice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InvoiceID) > 0 {
		i -= len(m.InvoiceID)
		copy(dAtA[i:], m.InvoiceID)
		i = encodeVarintInvoice(dAtA, i, uint64(len(m.InvoiceID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInvoice(dAtA []byte, offset int, v uint64) int {
	offset -= sovInvoice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InvoiceBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = len(m.OrigOwner)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	return n
}

func (m *InvoiceFinance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovInvoice(uint64(l))
	l = m.AmountLocked.Size()
	n += 1 + l + sovInvoice(uint64(l))
	if m.Apy != 0 {
		n += 5
	}
	return n
}

func (m *InvoiceMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvoiceID)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = m.Share.Size()
	n += 1 + l + sovInvoice(uint64(l))
	l = len(m.InvoiceHolder)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	return n
}

func (m *Invoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvoiceID)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.InvoiceBase != nil {
		l = m.InvoiceBase.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	if m.InvoiceFinance != nil {
		l = m.InvoiceFinance.Size()
		n += 1 + l + sovInvoice(uint64(l))
	}
	l = len(m.CurrentOwner)
	if l > 0 {
		n += 1 + l + sovInvoice(uint64(l))
	}
	if len(m.InvoiceMembers) > 0 {
		for _, e := range m.InvoiceMembers {
			l = e.Size()
			n += 1 + l + sovInvoice(uint64(l))
		}
	}
	if m.RootOwner {
		n += 2
	}
	if m.Deleted {
		n += 2
	}
	if m.IsListedForSell {
		n += 2
	}
	return n
}

func sovInvoice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInvoice(x uint64) (n int) {
	return sovInvoice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InvoiceBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrigOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrigOwner = append(m.OrigOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.OrigOwner == nil {
				m.OrigOwner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceFinance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceFinance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceFinance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountLocked", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountLocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Apy = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvoiceMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvoiceMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvoiceMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Share.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceHolder", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceHolder = append(m.InvoiceHolder[:0], dAtA[iNdEx:postIndex]...)
			if m.InvoiceHolder == nil {
				m.InvoiceHolder = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Invoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvoiceBase == nil {
				m.InvoiceBase = &InvoiceBase{}
			}
			if err := m.InvoiceBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceFinance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvoiceFinance == nil {
				m.InvoiceFinance = &InvoiceFinance{}
			}
			if err := m.InvoiceFinance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentOwner = append(m.CurrentOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentOwner == nil {
				m.CurrentOwner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvoiceMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInvoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvoiceMembers = append(m.InvoiceMembers, InvoiceMember{})
			if err := m.InvoiceMembers[len(m.InvoiceMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootOwner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RootOwner = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deleted = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsListedForSell", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsListedForSell = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInvoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInvoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvoice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvoice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInvoice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInvoice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInvoice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInvoice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvoice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInvoice = fmt.Errorf("proto: unexpected end of group")
)
