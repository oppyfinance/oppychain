// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: invoice/place_order.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlaceOrder struct {
	Creator         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	PlaceOrderIndex string                                        `protobuf:"bytes,2,opt,name=placeOrderIndex,proto3" json:"placeOrderIndex,omitempty"`
	SellOrderID     string                                        `protobuf:"bytes,3,opt,name=sellOrderID,proto3" json:"sellOrderID,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int        `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	OrderStatus     Status                                        `protobuf:"varint,5,opt,name=OrderStatus,proto3,customtype=Status" json:"OrderStatus"`
	CreatedTime     time.Time                                     `protobuf:"bytes,6,opt,name=createdTime,proto3,stdtime" json:"createdTime"`
}

func (m *PlaceOrder) Reset()         { *m = PlaceOrder{} }
func (m *PlaceOrder) String() string { return proto.CompactTextString(m) }
func (*PlaceOrder) ProtoMessage()    {}
func (*PlaceOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_a475c2d62fa6ce7c, []int{0}
}
func (m *PlaceOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceOrder.Merge(m, src)
}
func (m *PlaceOrder) XXX_Size() int {
	return m.Size()
}
func (m *PlaceOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceOrder proto.InternalMessageInfo

func (m *PlaceOrder) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *PlaceOrder) GetPlaceOrderIndex() string {
	if m != nil {
		return m.PlaceOrderIndex
	}
	return ""
}

func (m *PlaceOrder) GetSellOrderID() string {
	if m != nil {
		return m.SellOrderID
	}
	return ""
}

func (m *PlaceOrder) GetCreatedTime() time.Time {
	if m != nil {
		return m.CreatedTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*PlaceOrder)(nil), "oppyfinance.oppychain.invoice.PlaceOrder")
}

func init() { proto.RegisterFile("invoice/place_order.proto", fileDescriptor_a475c2d62fa6ce7c) }

var fileDescriptor_a475c2d62fa6ce7c = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x8a, 0xdb, 0x30,
	0x10, 0xb5, 0xd2, 0xc6, 0x6d, 0xe5, 0xd2, 0x82, 0xe9, 0xc1, 0x0d, 0xd4, 0x36, 0x3d, 0x14, 0x5f,
	0x22, 0x35, 0xed, 0x17, 0xc4, 0x94, 0x40, 0xc8, 0xa1, 0xc5, 0xcd, 0xa9, 0x97, 0xa2, 0xc8, 0x8a,
	0x23, 0xd6, 0xb6, 0x8c, 0x25, 0x2f, 0xc9, 0x5f, 0xe4, 0xb3, 0x72, 0xcc, 0x71, 0xd9, 0x43, 0x76,
	0x49, 0x0e, 0xfb, 0x0f, 0x7b, 0x5a, 0x2c, 0xdb, 0x21, 0xec, 0x69, 0x4f, 0x1a, 0x1e, 0xf3, 0xde,
	0xcc, 0xbc, 0x27, 0xf8, 0x99, 0xe7, 0xd7, 0x82, 0x53, 0x86, 0x8b, 0x94, 0x50, 0xf6, 0x5f, 0x94,
	0x31, 0x2b, 0x51, 0x51, 0x0a, 0x25, 0xec, 0x2f, 0xa2, 0x28, 0x36, 0x4b, 0x9e, 0x93, 0x9c, 0x32,
	0x54, 0xd7, 0x74, 0x45, 0x78, 0x8e, 0x5a, 0xc2, 0xc0, 0x4b, 0x84, 0x48, 0x52, 0x86, 0x75, 0xf3,
	0xa2, 0x5a, 0x62, 0xc5, 0x33, 0x26, 0x15, 0xc9, 0x8a, 0x86, 0x3f, 0xf8, 0x94, 0x88, 0x44, 0xe8,
	0x12, 0xd7, 0x55, 0x83, 0x7e, 0x7d, 0xe8, 0x41, 0xf8, 0xa7, 0x9e, 0xf5, 0xbb, 0x1e, 0x65, 0xcf,
	0xe0, 0x1b, 0x5a, 0x32, 0xa2, 0x44, 0xe9, 0x00, 0x1f, 0x04, 0xef, 0xc3, 0xd1, 0xe3, 0xc1, 0x1b,
	0x26, 0x5c, 0xad, 0xaa, 0x05, 0xa2, 0x22, 0xc3, 0x54, 0xc8, 0x4c, 0xc8, 0xf6, 0x19, 0xca, 0xf8,
	0x0a, 0xab, 0x4d, 0xc1, 0x24, 0x1a, 0x53, 0x3a, 0x8e, 0xe3, 0x92, 0x49, 0x19, 0x75, 0x0a, 0x76,
	0x00, 0x3f, 0x16, 0x67, 0xe9, 0x69, 0x1e, 0xb3, 0xb5, 0xd3, 0xf3, 0x41, 0xf0, 0x2e, 0x7a, 0x0e,
	0xdb, 0x3e, 0xb4, 0x24, 0x4b, 0xd3, 0x06, 0xf9, 0xe5, 0xbc, 0xd2, 0x5d, 0x97, 0x90, 0x3d, 0x81,
	0x26, 0xc9, 0x44, 0x95, 0x2b, 0xe7, 0xb5, 0xde, 0x0b, 0xed, 0x0e, 0x9e, 0x71, 0x7b, 0xf0, 0xbe,
	0xbd, 0x60, 0xb7, 0x69, 0xae, 0xa2, 0x96, 0x6d, 0x7f, 0x87, 0x96, 0x96, 0xfc, 0xab, 0x88, 0xaa,
	0xa4, 0xd3, 0xf7, 0x41, 0xd0, 0x0f, 0x3f, 0xb4, 0x62, 0x66, 0x83, 0x46, 0x97, 0x2d, 0xf6, 0x04,
	0x5a, 0xfa, 0x20, 0x16, 0xcf, 0x79, 0xc6, 0x1c, 0xd3, 0x07, 0x81, 0xf5, 0x63, 0x80, 0x1a, 0xbb,
	0x51, 0x67, 0x37, 0x9a, 0x77, 0x76, 0x87, 0x6f, 0x6b, 0xb5, 0xed, 0x9d, 0x07, 0xa2, 0x4b, 0x62,
	0x38, 0xdb, 0x1d, 0x5d, 0xb0, 0x3f, 0xba, 0xe0, 0xfe, 0xe8, 0x82, 0xed, 0xc9, 0x35, 0xf6, 0x27,
	0xd7, 0xb8, 0x39, 0xb9, 0xc6, 0xbf, 0x51, 0xc2, 0x55, 0x4a, 0x9a, 0x1b, 0xea, 0x60, 0x87, 0x6d,
	0xca, 0xf8, 0x9c, 0x32, 0x5e, 0xe3, 0xee, 0x63, 0xe8, 0x93, 0x16, 0xa6, 0x9e, 0xfb, 0xf3, 0x29,
	0x00, 0x00, 0xff, 0xff, 0x92, 0x6b, 0x9a, 0xb2, 0x30, 0x02, 0x00, 0x00,
}

func (m *PlaceOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPlaceOrder(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if m.OrderStatus != 0 {
		i = encodeVarintPlaceOrder(dAtA, i, uint64(m.OrderStatus))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPlaceOrder(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.SellOrderID) > 0 {
		i -= len(m.SellOrderID)
		copy(dAtA[i:], m.SellOrderID)
		i = encodeVarintPlaceOrder(dAtA, i, uint64(len(m.SellOrderID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlaceOrderIndex) > 0 {
		i -= len(m.PlaceOrderIndex)
		copy(dAtA[i:], m.PlaceOrderIndex)
		i = encodeVarintPlaceOrder(dAtA, i, uint64(len(m.PlaceOrderIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPlaceOrder(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlaceOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlaceOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlaceOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPlaceOrder(uint64(l))
	}
	l = len(m.PlaceOrderIndex)
	if l > 0 {
		n += 1 + l + sovPlaceOrder(uint64(l))
	}
	l = len(m.SellOrderID)
	if l > 0 {
		n += 1 + l + sovPlaceOrder(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPlaceOrder(uint64(l))
	if m.OrderStatus != 0 {
		n += 1 + sovPlaceOrder(uint64(m.OrderStatus))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedTime)
	n += 1 + l + sovPlaceOrder(uint64(l))
	return n
}

func sovPlaceOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlaceOrder(x uint64) (n int) {
	return sovPlaceOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlaceOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlaceOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrderIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceOrderIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderStatus", wireType)
			}
			m.OrderStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderStatus |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlaceOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPlaceOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlaceOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlaceOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlaceOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlaceOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlaceOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlaceOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlaceOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlaceOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlaceOrder = fmt.Errorf("proto: unexpected end of group")
)
