// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: invoice/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetPlaceOrderRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetPlaceOrderRequest) Reset()         { *m = QueryGetPlaceOrderRequest{} }
func (m *QueryGetPlaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlaceOrderRequest) ProtoMessage()    {}
func (*QueryGetPlaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{0}
}
func (m *QueryGetPlaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlaceOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlaceOrderRequest.Merge(m, src)
}
func (m *QueryGetPlaceOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlaceOrderRequest proto.InternalMessageInfo

func (m *QueryGetPlaceOrderRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetPlaceOrderResponse struct {
	PlaceOrder *PlaceOrder `protobuf:"bytes,1,opt,name=PlaceOrder,proto3" json:"PlaceOrder,omitempty"`
}

func (m *QueryGetPlaceOrderResponse) Reset()         { *m = QueryGetPlaceOrderResponse{} }
func (m *QueryGetPlaceOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPlaceOrderResponse) ProtoMessage()    {}
func (*QueryGetPlaceOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{1}
}
func (m *QueryGetPlaceOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPlaceOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPlaceOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPlaceOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPlaceOrderResponse.Merge(m, src)
}
func (m *QueryGetPlaceOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPlaceOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPlaceOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPlaceOrderResponse proto.InternalMessageInfo

func (m *QueryGetPlaceOrderResponse) GetPlaceOrder() *PlaceOrder {
	if m != nil {
		return m.PlaceOrder
	}
	return nil
}

type QueryAllPlaceOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlaceOrderRequest) Reset()         { *m = QueryAllPlaceOrderRequest{} }
func (m *QueryAllPlaceOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlaceOrderRequest) ProtoMessage()    {}
func (*QueryAllPlaceOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{2}
}
func (m *QueryAllPlaceOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlaceOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlaceOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlaceOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlaceOrderRequest.Merge(m, src)
}
func (m *QueryAllPlaceOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlaceOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlaceOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlaceOrderRequest proto.InternalMessageInfo

func (m *QueryAllPlaceOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPlaceOrderResponse struct {
	PlaceOrder []*PlaceOrder       `protobuf:"bytes,1,rep,name=PlaceOrder,proto3" json:"PlaceOrder,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPlaceOrderResponse) Reset()         { *m = QueryAllPlaceOrderResponse{} }
func (m *QueryAllPlaceOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPlaceOrderResponse) ProtoMessage()    {}
func (*QueryAllPlaceOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{3}
}
func (m *QueryAllPlaceOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPlaceOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPlaceOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPlaceOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPlaceOrderResponse.Merge(m, src)
}
func (m *QueryAllPlaceOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPlaceOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPlaceOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPlaceOrderResponse proto.InternalMessageInfo

func (m *QueryAllPlaceOrderResponse) GetPlaceOrder() []*PlaceOrder {
	if m != nil {
		return m.PlaceOrder
	}
	return nil
}

func (m *QueryAllPlaceOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSellOrderRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSellOrderRequest) Reset()         { *m = QueryGetSellOrderRequest{} }
func (m *QueryGetSellOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellOrderRequest) ProtoMessage()    {}
func (*QueryGetSellOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{4}
}
func (m *QueryGetSellOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellOrderRequest.Merge(m, src)
}
func (m *QueryGetSellOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellOrderRequest proto.InternalMessageInfo

func (m *QueryGetSellOrderRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSellOrderResponse struct {
	SellOrder *SellOrder `protobuf:"bytes,1,opt,name=SellOrder,proto3" json:"SellOrder,omitempty"`
}

func (m *QueryGetSellOrderResponse) Reset()         { *m = QueryGetSellOrderResponse{} }
func (m *QueryGetSellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSellOrderResponse) ProtoMessage()    {}
func (*QueryGetSellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{5}
}
func (m *QueryGetSellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSellOrderResponse.Merge(m, src)
}
func (m *QueryGetSellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSellOrderResponse proto.InternalMessageInfo

func (m *QueryGetSellOrderResponse) GetSellOrder() *SellOrder {
	if m != nil {
		return m.SellOrder
	}
	return nil
}

type QueryAllSellOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellOrderRequest) Reset()         { *m = QueryAllSellOrderRequest{} }
func (m *QueryAllSellOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellOrderRequest) ProtoMessage()    {}
func (*QueryAllSellOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{6}
}
func (m *QueryAllSellOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellOrderRequest.Merge(m, src)
}
func (m *QueryAllSellOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellOrderRequest proto.InternalMessageInfo

func (m *QueryAllSellOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSellOrderResponse struct {
	SellOrder  []*SellOrder        `protobuf:"bytes,1,rep,name=SellOrder,proto3" json:"SellOrder,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSellOrderResponse) Reset()         { *m = QueryAllSellOrderResponse{} }
func (m *QueryAllSellOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSellOrderResponse) ProtoMessage()    {}
func (*QueryAllSellOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{7}
}
func (m *QueryAllSellOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSellOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSellOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSellOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSellOrderResponse.Merge(m, src)
}
func (m *QueryAllSellOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSellOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSellOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSellOrderResponse proto.InternalMessageInfo

func (m *QueryAllSellOrderResponse) GetSellOrder() []*SellOrder {
	if m != nil {
		return m.SellOrder
	}
	return nil
}

func (m *QueryAllSellOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetInvoiceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetInvoiceRequest) Reset()         { *m = QueryGetInvoiceRequest{} }
func (m *QueryGetInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInvoiceRequest) ProtoMessage()    {}
func (*QueryGetInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{8}
}
func (m *QueryGetInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInvoiceRequest.Merge(m, src)
}
func (m *QueryGetInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInvoiceRequest proto.InternalMessageInfo

func (m *QueryGetInvoiceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetInvoiceResponse struct {
	Invoice *Invoice `protobuf:"bytes,1,opt,name=Invoice,proto3" json:"Invoice,omitempty"`
}

func (m *QueryGetInvoiceResponse) Reset()         { *m = QueryGetInvoiceResponse{} }
func (m *QueryGetInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInvoiceResponse) ProtoMessage()    {}
func (*QueryGetInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{9}
}
func (m *QueryGetInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInvoiceResponse.Merge(m, src)
}
func (m *QueryGetInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInvoiceResponse proto.InternalMessageInfo

func (m *QueryGetInvoiceResponse) GetInvoice() *Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

type QueryAllInvoiceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInvoiceRequest) Reset()         { *m = QueryAllInvoiceRequest{} }
func (m *QueryAllInvoiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInvoiceRequest) ProtoMessage()    {}
func (*QueryAllInvoiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{10}
}
func (m *QueryAllInvoiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInvoiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInvoiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInvoiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInvoiceRequest.Merge(m, src)
}
func (m *QueryAllInvoiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInvoiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInvoiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInvoiceRequest proto.InternalMessageInfo

func (m *QueryAllInvoiceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInvoiceResponse struct {
	Invoice    []*Invoice          `protobuf:"bytes,1,rep,name=Invoice,proto3" json:"Invoice,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInvoiceResponse) Reset()         { *m = QueryAllInvoiceResponse{} }
func (m *QueryAllInvoiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInvoiceResponse) ProtoMessage()    {}
func (*QueryAllInvoiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42451b139c18b2f9, []int{11}
}
func (m *QueryAllInvoiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInvoiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInvoiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInvoiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInvoiceResponse.Merge(m, src)
}
func (m *QueryAllInvoiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInvoiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInvoiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInvoiceResponse proto.InternalMessageInfo

func (m *QueryAllInvoiceResponse) GetInvoice() []*Invoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

func (m *QueryAllInvoiceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetPlaceOrderRequest)(nil), "oppyfinance.oppychain.invoice.QueryGetPlaceOrderRequest")
	proto.RegisterType((*QueryGetPlaceOrderResponse)(nil), "oppyfinance.oppychain.invoice.QueryGetPlaceOrderResponse")
	proto.RegisterType((*QueryAllPlaceOrderRequest)(nil), "oppyfinance.oppychain.invoice.QueryAllPlaceOrderRequest")
	proto.RegisterType((*QueryAllPlaceOrderResponse)(nil), "oppyfinance.oppychain.invoice.QueryAllPlaceOrderResponse")
	proto.RegisterType((*QueryGetSellOrderRequest)(nil), "oppyfinance.oppychain.invoice.QueryGetSellOrderRequest")
	proto.RegisterType((*QueryGetSellOrderResponse)(nil), "oppyfinance.oppychain.invoice.QueryGetSellOrderResponse")
	proto.RegisterType((*QueryAllSellOrderRequest)(nil), "oppyfinance.oppychain.invoice.QueryAllSellOrderRequest")
	proto.RegisterType((*QueryAllSellOrderResponse)(nil), "oppyfinance.oppychain.invoice.QueryAllSellOrderResponse")
	proto.RegisterType((*QueryGetInvoiceRequest)(nil), "oppyfinance.oppychain.invoice.QueryGetInvoiceRequest")
	proto.RegisterType((*QueryGetInvoiceResponse)(nil), "oppyfinance.oppychain.invoice.QueryGetInvoiceResponse")
	proto.RegisterType((*QueryAllInvoiceRequest)(nil), "oppyfinance.oppychain.invoice.QueryAllInvoiceRequest")
	proto.RegisterType((*QueryAllInvoiceResponse)(nil), "oppyfinance.oppychain.invoice.QueryAllInvoiceResponse")
}

func init() { proto.RegisterFile("invoice/query.proto", fileDescriptor_42451b139c18b2f9) }

var fileDescriptor_42451b139c18b2f9 = []byte{
	// 670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xc7, 0x7b, 0xad, 0x0a, 0xf4, 0x80, 0xe5, 0x78, 0x6b, 0x2d, 0xb0, 0x90, 0x07, 0xda, 0x14,
	0xb8, 0xc3, 0x29, 0x25, 0x2d, 0x13, 0x01, 0xa9, 0x55, 0xc5, 0x40, 0x09, 0x1b, 0x0c, 0x70, 0x71,
	0x0e, 0x63, 0xe9, 0xea, 0x73, 0x63, 0xb7, 0x6a, 0x84, 0x58, 0xf8, 0x04, 0x48, 0x7c, 0x05, 0xc6,
	0x0e, 0x20, 0x31, 0xc0, 0xc0, 0xce, 0x58, 0x89, 0xa5, 0x23, 0x4a, 0xf8, 0x20, 0xc8, 0xe7, 0xf3,
	0x4b, 0x5e, 0x1a, 0xbb, 0x56, 0xa6, 0xb8, 0x77, 0xf7, 0x7f, 0xee, 0xf7, 0xff, 0x3f, 0xf6, 0xa3,
	0xc2, 0x4b, 0x8e, 0xbb, 0x2f, 0x1c, 0x8b, 0x91, 0xdd, 0x3d, 0xd6, 0xee, 0x60, 0xaf, 0x2d, 0x02,
	0x81, 0x6e, 0x08, 0xcf, 0xeb, 0xbc, 0x75, 0x5c, 0xea, 0x5a, 0x0c, 0x87, 0xcf, 0xd6, 0x3b, 0xea,
	0xb8, 0x58, 0x1d, 0xd5, 0xae, 0xdb, 0x42, 0xd8, 0x9c, 0x11, 0xea, 0x39, 0x84, 0xba, 0xae, 0x08,
	0x68, 0xe0, 0x08, 0xd7, 0x8f, 0xc4, 0xda, 0xb2, 0x25, 0xfc, 0x1d, 0xe1, 0x93, 0x26, 0xf5, 0x55,
	0x55, 0xb2, 0x6f, 0x36, 0x59, 0x40, 0x4d, 0xe2, 0x51, 0xdb, 0x71, 0xe5, 0x61, 0x75, 0x76, 0x21,
	0xbe, 0xdd, 0xe3, 0xd4, 0x62, 0xaf, 0x45, 0xbb, 0xc5, 0xda, 0x6a, 0x6b, 0x3e, 0xde, 0xf2, 0x19,
	0xe7, 0x7d, 0x3b, 0x57, 0xe2, 0x1d, 0xf5, 0x1b, 0x2d, 0x1b, 0x26, 0x5c, 0x78, 0x1e, 0xde, 0xb6,
	0xc9, 0x82, 0xed, 0xb0, 0xda, 0xb3, 0x50, 0xd2, 0x60, 0xbb, 0x7b, 0xcc, 0x0f, 0xd0, 0x65, 0x38,
	0xeb, 0xb8, 0x2d, 0x76, 0x30, 0x0f, 0x6e, 0x82, 0xa5, 0xb9, 0x46, 0xf4, 0x87, 0x61, 0x43, 0x6d,
	0x94, 0xc4, 0xf7, 0x84, 0xeb, 0x33, 0xb4, 0x05, 0x61, 0xba, 0x2a, 0x85, 0xe7, 0xab, 0x15, 0x3c,
	0x36, 0x1a, 0x9c, 0x29, 0x93, 0x11, 0x1b, 0x96, 0x62, 0xab, 0x73, 0x3e, 0xcc, 0xb6, 0x01, 0x61,
	0x1a, 0x8c, 0xba, 0xe7, 0x16, 0x8e, 0x52, 0xc4, 0x61, 0x8a, 0x38, 0xea, 0x8d, 0x4a, 0x11, 0x6f,
	0x53, 0x9b, 0x29, 0x6d, 0x23, 0xa3, 0x34, 0xbe, 0x02, 0x65, 0x67, 0xe0, 0x96, 0x13, 0xec, 0xcc,
	0x94, 0xb6, 0x83, 0x36, 0xfb, 0x88, 0xa7, 0x25, 0xf1, 0x62, 0x2e, 0x71, 0xc4, 0xd1, 0x87, 0x7c,
	0x0f, 0xce, 0xc7, 0x0d, 0x78, 0xc1, 0x38, 0x2f, 0xd0, 0x32, 0x2b, 0xed, 0x72, 0x46, 0xa1, 0x2c,
	0x6e, 0xc0, 0xb9, 0x64, 0x51, 0x05, 0xb9, 0x94, 0xe3, 0x30, 0x2d, 0x92, 0x4a, 0x8d, 0xa6, 0xc2,
	0xaa, 0x73, 0x3e, 0x84, 0x35, 0xa9, 0x6e, 0x1d, 0x82, 0xf4, 0x9d, 0xc8, 0x75, 0x32, 0x53, 0xd2,
	0xc9, 0xe4, 0x3a, 0x85, 0xe1, 0xd5, 0x38, 0xf7, 0xad, 0xe8, 0xc2, 0xf1, 0x7d, 0x7a, 0x05, 0xaf,
	0x0d, 0x9d, 0x57, 0xde, 0x1e, 0xc1, 0xb3, 0x6a, 0x29, 0x89, 0x6f, 0xbc, 0xb3, 0xb8, 0x40, 0x2c,
	0x33, 0xde, 0x28, 0x98, 0x3a, 0xe7, 0x03, 0x30, 0x93, 0xea, 0xce, 0x17, 0xa0, 0xf8, 0xb3, 0x57,
	0x8c, 0xe2, 0x9f, 0x29, 0xc1, 0x3f, 0xb1, 0xae, 0x54, 0x8f, 0xcf, 0xc1, 0x59, 0x89, 0x89, 0x7e,
	0x81, 0xec, 0xe7, 0x8d, 0xd6, 0x72, 0x90, 0x4e, 0x9c, 0x94, 0xda, 0x7a, 0x09, 0x65, 0x44, 0x66,
	0x3c, 0xfc, 0xf8, 0xe7, 0xdf, 0xe7, 0xe9, 0xfb, 0xa8, 0x4a, 0x32, 0x25, 0xe4, 0xf3, 0x93, 0xb0,
	0x44, 0x8b, 0xf4, 0x4d, 0x7b, 0xa9, 0x25, 0xef, 0xe5, 0xeb, 0xf2, 0x01, 0xfd, 0x00, 0xf0, 0x62,
	0x5a, 0xb2, 0xce, 0x79, 0x31, 0x0b, 0xa3, 0x06, 0x6a, 0x31, 0x0b, 0x23, 0x87, 0xa4, 0x51, 0x95,
	0x16, 0xee, 0xa0, 0xe5, 0xe2, 0x16, 0xd0, 0x4f, 0x90, 0xf9, 0x58, 0x51, 0xad, 0x60, 0x7e, 0x83,
	0x83, 0x45, 0x5b, 0x3b, 0xbd, 0x50, 0x41, 0xaf, 0x4b, 0xe8, 0x15, 0x64, 0xe6, 0x41, 0xfb, 0xb1,
	0x34, 0x89, 0xfd, 0x3b, 0x80, 0x17, 0x92, 0x82, 0x61, 0xea, 0xb5, 0x82, 0xd9, 0x95, 0xc3, 0x1f,
	0x35, 0xeb, 0x0c, 0x53, 0xe2, 0xdf, 0x46, 0x95, 0xc2, 0xf8, 0xe8, 0x1b, 0x48, 0xbe, 0x41, 0xb4,
	0x5a, 0x30, 0xb7, 0xfe, 0x49, 0xa1, 0x3d, 0x38, 0xad, 0x4c, 0xd1, 0xd6, 0x24, 0xad, 0x89, 0x48,
	0x1e, 0x6d, 0xfc, 0x1b, 0x47, 0x7d, 0x08, 0x20, 0x54, 0xc5, 0xc2, 0xa0, 0x57, 0x0b, 0xe6, 0x55,
	0x06, 0x7b, 0x78, 0x68, 0x19, 0x44, 0x62, 0x57, 0xd0, 0x62, 0x41, 0xec, 0xc7, 0x4f, 0x7f, 0x77,
	0x75, 0x70, 0xd4, 0xd5, 0xc1, 0xdf, 0xae, 0x0e, 0x3e, 0xf5, 0xf4, 0xa9, 0xa3, 0x9e, 0x3e, 0x75,
	0xdc, 0xd3, 0xa7, 0x5e, 0x9a, 0xb6, 0x13, 0x70, 0xda, 0xc4, 0x96, 0xd8, 0x91, 0x05, 0xee, 0x66,
	0xab, 0x49, 0x1a, 0x72, 0x90, 0x94, 0x0b, 0x3a, 0x1e, 0xf3, 0x9b, 0x67, 0xe4, 0xbf, 0x68, 0x2b,
	0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x98, 0xa2, 0x41, 0x6e, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a placeOrder by index.
	PlaceOrder(ctx context.Context, in *QueryGetPlaceOrderRequest, opts ...grpc.CallOption) (*QueryGetPlaceOrderResponse, error)
	// Queries a list of placeOrder items.
	PlaceOrderAll(ctx context.Context, in *QueryAllPlaceOrderRequest, opts ...grpc.CallOption) (*QueryAllPlaceOrderResponse, error)
	// Queries a sellOrder by index.
	SellOrder(ctx context.Context, in *QueryGetSellOrderRequest, opts ...grpc.CallOption) (*QueryGetSellOrderResponse, error)
	// Queries a list of sellOrder items.
	SellOrderAll(ctx context.Context, in *QueryAllSellOrderRequest, opts ...grpc.CallOption) (*QueryAllSellOrderResponse, error)
	// Queries a invoice by index.
	Invoice(ctx context.Context, in *QueryGetInvoiceRequest, opts ...grpc.CallOption) (*QueryGetInvoiceResponse, error)
	// Queries a list of invoice items.
	InvoiceAll(ctx context.Context, in *QueryAllInvoiceRequest, opts ...grpc.CallOption) (*QueryAllInvoiceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PlaceOrder(ctx context.Context, in *QueryGetPlaceOrderRequest, opts ...grpc.CallOption) (*QueryGetPlaceOrderResponse, error) {
	out := new(QueryGetPlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.invoice.Query/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PlaceOrderAll(ctx context.Context, in *QueryAllPlaceOrderRequest, opts ...grpc.CallOption) (*QueryAllPlaceOrderResponse, error) {
	out := new(QueryAllPlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.invoice.Query/PlaceOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellOrder(ctx context.Context, in *QueryGetSellOrderRequest, opts ...grpc.CallOption) (*QueryGetSellOrderResponse, error) {
	out := new(QueryGetSellOrderResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.invoice.Query/SellOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SellOrderAll(ctx context.Context, in *QueryAllSellOrderRequest, opts ...grpc.CallOption) (*QueryAllSellOrderResponse, error) {
	out := new(QueryAllSellOrderResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.invoice.Query/SellOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Invoice(ctx context.Context, in *QueryGetInvoiceRequest, opts ...grpc.CallOption) (*QueryGetInvoiceResponse, error) {
	out := new(QueryGetInvoiceResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.invoice.Query/Invoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InvoiceAll(ctx context.Context, in *QueryAllInvoiceRequest, opts ...grpc.CallOption) (*QueryAllInvoiceResponse, error) {
	out := new(QueryAllInvoiceResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.invoice.Query/InvoiceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a placeOrder by index.
	PlaceOrder(context.Context, *QueryGetPlaceOrderRequest) (*QueryGetPlaceOrderResponse, error)
	// Queries a list of placeOrder items.
	PlaceOrderAll(context.Context, *QueryAllPlaceOrderRequest) (*QueryAllPlaceOrderResponse, error)
	// Queries a sellOrder by index.
	SellOrder(context.Context, *QueryGetSellOrderRequest) (*QueryGetSellOrderResponse, error)
	// Queries a list of sellOrder items.
	SellOrderAll(context.Context, *QueryAllSellOrderRequest) (*QueryAllSellOrderResponse, error)
	// Queries a invoice by index.
	Invoice(context.Context, *QueryGetInvoiceRequest) (*QueryGetInvoiceResponse, error)
	// Queries a list of invoice items.
	InvoiceAll(context.Context, *QueryAllInvoiceRequest) (*QueryAllInvoiceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PlaceOrder(ctx context.Context, req *QueryGetPlaceOrderRequest) (*QueryGetPlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (*UnimplementedQueryServer) PlaceOrderAll(ctx context.Context, req *QueryAllPlaceOrderRequest) (*QueryAllPlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrderAll not implemented")
}
func (*UnimplementedQueryServer) SellOrder(ctx context.Context, req *QueryGetSellOrderRequest) (*QueryGetSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOrder not implemented")
}
func (*UnimplementedQueryServer) SellOrderAll(ctx context.Context, req *QueryAllSellOrderRequest) (*QueryAllSellOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellOrderAll not implemented")
}
func (*UnimplementedQueryServer) Invoice(ctx context.Context, req *QueryGetInvoiceRequest) (*QueryGetInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invoice not implemented")
}
func (*UnimplementedQueryServer) InvoiceAll(ctx context.Context, req *QueryAllInvoiceRequest) (*QueryAllInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoiceAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.invoice.Query/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlaceOrder(ctx, req.(*QueryGetPlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PlaceOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PlaceOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.invoice.Query/PlaceOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PlaceOrderAll(ctx, req.(*QueryAllPlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.invoice.Query/SellOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellOrder(ctx, req.(*QueryGetSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SellOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSellOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SellOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.invoice.Query/SellOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SellOrderAll(ctx, req.(*QueryAllSellOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Invoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Invoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.invoice.Query/Invoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Invoice(ctx, req.(*QueryGetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InvoiceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InvoiceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.invoice.Query/InvoiceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InvoiceAll(ctx, req.(*QueryAllInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oppyfinance.oppychain.invoice.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceOrder",
			Handler:    _Query_PlaceOrder_Handler,
		},
		{
			MethodName: "PlaceOrderAll",
			Handler:    _Query_PlaceOrderAll_Handler,
		},
		{
			MethodName: "SellOrder",
			Handler:    _Query_SellOrder_Handler,
		},
		{
			MethodName: "SellOrderAll",
			Handler:    _Query_SellOrderAll_Handler,
		},
		{
			MethodName: "Invoice",
			Handler:    _Query_Invoice_Handler,
		},
		{
			MethodName: "InvoiceAll",
			Handler:    _Query_InvoiceAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoice/query.proto",
}

func (m *QueryGetPlaceOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlaceOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlaceOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPlaceOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPlaceOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPlaceOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlaceOrder != nil {
		{
			size, err := m.PlaceOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlaceOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlaceOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlaceOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPlaceOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPlaceOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPlaceOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PlaceOrder) > 0 {
		for iNdEx := len(m.PlaceOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlaceOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SellOrder != nil {
		{
			size, err := m.SellOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSellOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSellOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSellOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSellOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SellOrder) > 0 {
		for iNdEx := len(m.SellOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Invoice != nil {
		{
			size, err := m.Invoice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInvoiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInvoiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInvoiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInvoiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInvoiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInvoiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Invoice) > 0 {
		for iNdEx := len(m.Invoice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Invoice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPlaceOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPlaceOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlaceOrder != nil {
		l = m.PlaceOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlaceOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPlaceOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlaceOrder) > 0 {
		for _, e := range m.PlaceOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SellOrder != nil {
		l = m.SellOrder.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSellOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSellOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SellOrder) > 0 {
		for _, e := range m.SellOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Invoice != nil {
		l = m.Invoice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInvoiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInvoiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Invoice) > 0 {
		for _, e := range m.Invoice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPlaceOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlaceOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlaceOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPlaceOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPlaceOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPlaceOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaceOrder == nil {
				m.PlaceOrder = &PlaceOrder{}
			}
			if err := m.PlaceOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlaceOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlaceOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlaceOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPlaceOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPlaceOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPlaceOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceOrder = append(m.PlaceOrder, &PlaceOrder{})
			if err := m.PlaceOrder[len(m.PlaceOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SellOrder == nil {
				m.SellOrder = &SellOrder{}
			}
			if err := m.SellOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSellOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSellOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSellOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellOrder = append(m.SellOrder, &SellOrder{})
			if err := m.SellOrder[len(m.SellOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoice == nil {
				m.Invoice = &Invoice{}
			}
			if err := m.Invoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInvoiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInvoiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInvoiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInvoiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInvoiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInvoiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Invoice = append(m.Invoice, &Invoice{})
			if err := m.Invoice[len(m.Invoice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
