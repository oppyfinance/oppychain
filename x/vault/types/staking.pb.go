// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/staking.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	BlockChurnInterval int64                                    `protobuf:"varint,1,opt,name=block_churn_interval,json=blockChurnInterval,proto3" json:"block_churn_interval,omitempty" yaml:"block_churn_interval"`
	Power              int64                                    `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty" yaml:"power"`
	Step               int64                                    `protobuf:"varint,3,opt,name=step,proto3" json:"step,omitempty" yaml:"step"`
	CandidateRatio     github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,4,opt,name=candidate_ratio,json=candidateRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"candidate_ratio" yaml:"candidate_ratio"`
	TargetQuota        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=targetQuota,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"targetQuota" yaml:"target_quota"`
	HistoryLength      int32                                    `protobuf:"varint,6,opt,name=history_length,json=historyLength,proto3" json:"history_length,omitempty" yaml:"history_length"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f70c1fe68a07899e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBlockChurnInterval() int64 {
	if m != nil {
		return m.BlockChurnInterval
	}
	return 0
}

func (m *Params) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Params) GetStep() int64 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *Params) GetTargetQuota() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TargetQuota
	}
	return nil
}

func (m *Params) GetHistoryLength() int32 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

type Validator struct {
	Pubkey []byte `protobuf:"bytes,1,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Power  int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_f70c1fe68a07899e, []int{1}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Validator) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type StandbyPower struct {
	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Power int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *StandbyPower) Reset()         { *m = StandbyPower{} }
func (m *StandbyPower) String() string { return proto.CompactTextString(m) }
func (*StandbyPower) ProtoMessage()    {}
func (*StandbyPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_f70c1fe68a07899e, []int{2}
}
func (m *StandbyPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandbyPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandbyPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandbyPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandbyPower.Merge(m, src)
}
func (m *StandbyPower) XXX_Size() int {
	return m.Size()
}
func (m *StandbyPower) XXX_DiscardUnknown() {
	xxx_messageInfo_StandbyPower.DiscardUnknown(m)
}

var xxx_messageInfo_StandbyPower proto.InternalMessageInfo

func (m *StandbyPower) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *StandbyPower) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type Validators struct {
	AllValidators []*Validator `protobuf:"bytes,1,rep,name=all_validators,json=allValidators,proto3" json:"all_validators,omitempty"`
	Height        int64        `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Validators) Reset()         { *m = Validators{} }
func (m *Validators) String() string { return proto.CompactTextString(m) }
func (*Validators) ProtoMessage()    {}
func (*Validators) Descriptor() ([]byte, []int) {
	return fileDescriptor_f70c1fe68a07899e, []int{3}
}
func (m *Validators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validators.Merge(m, src)
}
func (m *Validators) XXX_Size() int {
	return m.Size()
}
func (m *Validators) XXX_DiscardUnknown() {
	xxx_messageInfo_Validators.DiscardUnknown(m)
}

var xxx_messageInfo_Validators proto.InternalMessageInfo

func (m *Validators) GetAllValidators() []*Validator {
	if m != nil {
		return m.AllValidators
	}
	return nil
}

func (m *Validators) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "oppyfinance.oppychain.vault.Params")
	proto.RegisterType((*Validator)(nil), "oppyfinance.oppychain.vault.Validator")
	proto.RegisterType((*StandbyPower)(nil), "oppyfinance.oppychain.vault.StandbyPower")
	proto.RegisterType((*Validators)(nil), "oppyfinance.oppychain.vault.Validators")
}

func init() { proto.RegisterFile("vault/staking.proto", fileDescriptor_f70c1fe68a07899e) }

var fileDescriptor_f70c1fe68a07899e = []byte{
	// 566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0x8e, 0x7f, 0x69, 0xa2, 0x5f, 0x2e, 0x69, 0x8a, 0xae, 0x21, 0x72, 0x5b, 0xc9, 0x17, 0x19,
	0x29, 0xca, 0x52, 0x5b, 0x85, 0x05, 0x3a, 0xa1, 0x14, 0x09, 0x2a, 0x81, 0xd4, 0x1a, 0x89, 0x81,
	0xc5, 0x3a, 0xdb, 0x87, 0x7d, 0x8a, 0xe3, 0x73, 0x7d, 0x97, 0x80, 0x77, 0xfe, 0x00, 0x46, 0xc6,
	0xce, 0xfc, 0x25, 0x1d, 0x3b, 0x22, 0x06, 0x83, 0x92, 0x85, 0x89, 0xc1, 0x7f, 0x01, 0xf2, 0x9d,
	0x15, 0xb5, 0x08, 0x10, 0x93, 0xdf, 0xfb, 0xde, 0x7b, 0xdf, 0x77, 0xf7, 0x3e, 0x1f, 0xd8, 0x5d,
	0xe2, 0x45, 0x2c, 0x6c, 0x2e, 0xf0, 0x8c, 0x26, 0xa1, 0x95, 0x66, 0x4c, 0x30, 0x78, 0xc0, 0xd2,
	0x34, 0x7f, 0x43, 0x13, 0x9c, 0xf8, 0xc4, 0xaa, 0x62, 0x3f, 0xc2, 0x34, 0xb1, 0x64, 0xeb, 0xfe,
	0x20, 0x64, 0x21, 0x93, 0x7d, 0x76, 0x15, 0xa9, 0x91, 0x7d, 0xc3, 0x67, 0x7c, 0xce, 0xb8, 0xed,
	0x61, 0x4e, 0xec, 0xe5, 0x91, 0x47, 0x04, 0x3e, 0xb2, 0x7d, 0x46, 0x13, 0x55, 0x37, 0x7f, 0x34,
	0x41, 0xfb, 0x0c, 0x67, 0x78, 0xce, 0xe1, 0x39, 0x18, 0x78, 0x31, 0xf3, 0x67, 0xae, 0x1f, 0x2d,
	0xb2, 0xc4, 0xa5, 0x89, 0x20, 0xd9, 0x12, 0xc7, 0xba, 0x36, 0xd2, 0x26, 0xcd, 0x29, 0x2a, 0x0b,
	0x74, 0x90, 0xe3, 0x79, 0x7c, 0x6c, 0xfe, 0xae, 0xcb, 0x74, 0xa0, 0x84, 0x4f, 0x2a, 0xf4, 0xb4,
	0x06, 0xe1, 0x18, 0xb4, 0x52, 0xf6, 0x96, 0x64, 0xfa, 0x7f, 0x92, 0xe3, 0x4e, 0x59, 0xa0, 0x9e,
	0xe2, 0x90, 0xb0, 0xe9, 0xa8, 0x32, 0xbc, 0x07, 0xb6, 0xb8, 0x20, 0xa9, 0xde, 0x94, 0x6d, 0x3b,
	0x65, 0x81, 0xba, 0xaa, 0xad, 0x42, 0x4d, 0x47, 0x16, 0xe1, 0x05, 0xd8, 0xf1, 0x71, 0x12, 0xd0,
	0x00, 0x0b, 0xe2, 0x66, 0x58, 0x50, 0xa6, 0x6f, 0x8d, 0xb4, 0x49, 0x67, 0xfa, 0xec, 0xaa, 0x40,
	0x8d, 0x2f, 0x05, 0x1a, 0x87, 0x54, 0x44, 0x0b, 0xcf, 0xf2, 0xd9, 0xdc, 0xae, 0xaf, 0xad, 0x3e,
	0x87, 0x3c, 0x98, 0xd9, 0x22, 0x4f, 0x09, 0xb7, 0x9e, 0x10, 0xbf, 0x2c, 0xd0, 0x50, 0xb1, 0xff,
	0x42, 0x67, 0x3a, 0xfd, 0x0d, 0xe2, 0x54, 0x00, 0x7c, 0xaf, 0x81, 0xae, 0xc0, 0x59, 0x48, 0xc4,
	0xf9, 0x82, 0x09, 0xac, 0xb7, 0x46, 0xcd, 0x49, 0xf7, 0xfe, 0x9e, 0xa5, 0x68, 0xad, 0x6a, 0xa9,
	0x56, 0xbd, 0x54, 0xeb, 0x84, 0xd1, 0x64, 0xfa, 0xb4, 0x3a, 0x4a, 0x59, 0xa0, 0x5d, 0x25, 0xa0,
	0x66, 0xdd, 0x8b, 0x6a, 0xd8, 0xfc, 0xf4, 0x15, 0x4d, 0xfe, 0xe1, 0x84, 0x15, 0x0f, 0x77, 0x6e,
	0xca, 0xc2, 0xc7, 0xa0, 0x1f, 0x51, 0x2e, 0x58, 0x96, 0xbb, 0x31, 0x49, 0x42, 0x11, 0xe9, 0xed,
	0x91, 0x36, 0x69, 0x4d, 0xf7, 0xca, 0x02, 0xdd, 0x55, 0x4a, 0xb7, 0xeb, 0xa6, 0xb3, 0x5d, 0x03,
	0xcf, 0x65, 0x7e, 0xfc, 0xff, 0xc7, 0x4b, 0xd4, 0xf8, 0x7e, 0x89, 0x34, 0xf3, 0x11, 0xe8, 0xbc,
	0xc2, 0x71, 0x75, 0x47, 0x96, 0xc1, 0x21, 0x68, 0xa7, 0x0b, 0x6f, 0x46, 0x72, 0x69, 0x72, 0xcf,
	0xa9, 0x33, 0x38, 0xb8, 0xe5, 0x5b, 0xed, 0x92, 0xf9, 0x10, 0xf4, 0x5e, 0x0a, 0x9c, 0x04, 0x5e,
	0x7e, 0x26, 0x5d, 0x83, 0x60, 0x0b, 0x07, 0x41, 0x26, 0x67, 0x3b, 0x8e, 0x8c, 0xff, 0x30, 0xc9,
	0x01, 0xd8, 0x88, 0x72, 0xf8, 0x02, 0xf4, 0x71, 0x1c, 0xbb, 0xcb, 0x0d, 0xa2, 0x6b, 0x72, 0xaf,
	0x63, 0xeb, 0x2f, 0xff, 0xb7, 0xb5, 0x21, 0x70, 0xb6, 0x71, 0x1c, 0xdf, 0xa0, 0x1b, 0x82, 0x76,
	0x44, 0x68, 0x18, 0x89, 0x5a, 0xb3, 0xce, 0xa6, 0xa7, 0x57, 0x2b, 0x43, 0xbb, 0x5e, 0x19, 0xda,
	0xb7, 0x95, 0xa1, 0x7d, 0x58, 0x1b, 0x8d, 0xeb, 0xb5, 0xd1, 0xf8, 0xbc, 0x36, 0x1a, 0xaf, 0xed,
	0x90, 0x8a, 0x18, 0x2b, 0x1b, 0x2a, 0x99, 0xc3, 0x5a, 0xd3, 0xde, 0x68, 0xda, 0xef, 0x6c, 0xf5,
	0x00, 0xa5, 0x27, 0x5e, 0x5b, 0x3e, 0x96, 0x07, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x57, 0xc9,
	0x5d, 0x11, 0x96, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BlockChurnInterval != that1.BlockChurnInterval {
		return false
	}
	if this.Power != that1.Power {
		return false
	}
	if this.Step != that1.Step {
		return false
	}
	if !this.CandidateRatio.Equal(that1.CandidateRatio) {
		return false
	}
	if len(this.TargetQuota) != len(that1.TargetQuota) {
		return false
	}
	for i := range this.TargetQuota {
		if !this.TargetQuota[i].Equal(&that1.TargetQuota[i]) {
			return false
		}
	}
	if this.HistoryLength != that1.HistoryLength {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HistoryLength != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.HistoryLength))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TargetQuota) > 0 {
		for iNdEx := len(m.TargetQuota) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TargetQuota[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size := m.CandidateRatio.Size()
		i -= size
		if _, err := m.CandidateRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Step != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x18
	}
	if m.Power != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if m.BlockChurnInterval != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.BlockChurnInterval))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StandbyPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandbyPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandbyPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintStaking(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintStaking(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AllValidators) > 0 {
		for iNdEx := len(m.AllValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovStaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockChurnInterval != 0 {
		n += 1 + sovStaking(uint64(m.BlockChurnInterval))
	}
	if m.Power != 0 {
		n += 1 + sovStaking(uint64(m.Power))
	}
	if m.Step != 0 {
		n += 1 + sovStaking(uint64(m.Step))
	}
	l = m.CandidateRatio.Size()
	n += 1 + l + sovStaking(uint64(l))
	if len(m.TargetQuota) > 0 {
		for _, e := range m.TargetQuota {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	if m.HistoryLength != 0 {
		n += 1 + sovStaking(uint64(m.HistoryLength))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovStaking(uint64(m.Power))
	}
	return n
}

func (m *StandbyPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovStaking(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovStaking(uint64(m.Power))
	}
	return n
}

func (m *Validators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllValidators) > 0 {
		for _, e := range m.AllValidators {
			l = e.Size()
			n += 1 + l + sovStaking(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovStaking(uint64(m.Height))
	}
	return n
}

func sovStaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStaking(x uint64) (n int) {
	return sovStaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockChurnInterval", wireType)
			}
			m.BlockChurnInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockChurnInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CandidateRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetQuota", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetQuota = append(m.TargetQuota, types.Coin{})
			if err := m.TargetQuota[len(m.TargetQuota)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryLength", wireType)
			}
			m.HistoryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = append(m.Pubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.Pubkey == nil {
				m.Pubkey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StandbyPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandbyPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandbyPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllValidators = append(m.AllValidators, &Validator{})
			if err := m.AllValidators[len(m.AllValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStaking = fmt.Errorf("proto: unexpected end of group")
)
