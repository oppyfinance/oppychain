// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPendingFeeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingFeeRequest) Reset()         { *m = QueryPendingFeeRequest{} }
func (m *QueryPendingFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingFeeRequest) ProtoMessage()    {}
func (*QueryPendingFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{0}
}
func (m *QueryPendingFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingFeeRequest.Merge(m, src)
}
func (m *QueryPendingFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingFeeRequest proto.InternalMessageInfo

func (m *QueryPendingFeeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPendingFeeResponse struct {
	Feecoin    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=feecoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"feecoin"`
	Pagination *query.PageResponse                      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPendingFeeResponse) Reset()         { *m = QueryPendingFeeResponse{} }
func (m *QueryPendingFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingFeeResponse) ProtoMessage()    {}
func (*QueryPendingFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{1}
}
func (m *QueryPendingFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingFeeResponse.Merge(m, src)
}
func (m *QueryPendingFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingFeeResponse proto.InternalMessageInfo

func (m *QueryPendingFeeResponse) GetFeecoin() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Feecoin
	}
	return nil
}

func (m *QueryPendingFeeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetOutboundTxRequest struct {
	RequestID string `protobuf:"bytes,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (m *QueryGetOutboundTxRequest) Reset()         { *m = QueryGetOutboundTxRequest{} }
func (m *QueryGetOutboundTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundTxRequest) ProtoMessage()    {}
func (*QueryGetOutboundTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{2}
}
func (m *QueryGetOutboundTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundTxRequest.Merge(m, src)
}
func (m *QueryGetOutboundTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundTxRequest proto.InternalMessageInfo

func (m *QueryGetOutboundTxRequest) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

type QueryGetOutboundTxResponse struct {
	OutboundTx OutboundTx `protobuf:"bytes,1,opt,name=outboundTx,proto3" json:"outboundTx"`
}

func (m *QueryGetOutboundTxResponse) Reset()         { *m = QueryGetOutboundTxResponse{} }
func (m *QueryGetOutboundTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOutboundTxResponse) ProtoMessage()    {}
func (*QueryGetOutboundTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{3}
}
func (m *QueryGetOutboundTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOutboundTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOutboundTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOutboundTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOutboundTxResponse.Merge(m, src)
}
func (m *QueryGetOutboundTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOutboundTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOutboundTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOutboundTxResponse proto.InternalMessageInfo

func (m *QueryGetOutboundTxResponse) GetOutboundTx() OutboundTx {
	if m != nil {
		return m.OutboundTx
	}
	return OutboundTx{}
}

type QueryAllOutboundTxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundTxRequest) Reset()         { *m = QueryAllOutboundTxRequest{} }
func (m *QueryAllOutboundTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundTxRequest) ProtoMessage()    {}
func (*QueryAllOutboundTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{4}
}
func (m *QueryAllOutboundTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundTxRequest.Merge(m, src)
}
func (m *QueryAllOutboundTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundTxRequest proto.InternalMessageInfo

func (m *QueryAllOutboundTxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllOutboundTxResponse struct {
	OutboundTx []OutboundTx        `protobuf:"bytes,1,rep,name=outboundTx,proto3" json:"outboundTx"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOutboundTxResponse) Reset()         { *m = QueryAllOutboundTxResponse{} }
func (m *QueryAllOutboundTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOutboundTxResponse) ProtoMessage()    {}
func (*QueryAllOutboundTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{5}
}
func (m *QueryAllOutboundTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOutboundTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOutboundTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOutboundTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOutboundTxResponse.Merge(m, src)
}
func (m *QueryAllOutboundTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOutboundTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOutboundTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOutboundTxResponse proto.InternalMessageInfo

func (m *QueryAllOutboundTxResponse) GetOutboundTx() []OutboundTx {
	if m != nil {
		return m.OutboundTx
	}
	return nil
}

func (m *QueryAllOutboundTxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetValidatorsRequest struct {
	Height string `protobuf:"bytes,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetValidatorsRequest) Reset()         { *m = QueryGetValidatorsRequest{} }
func (m *QueryGetValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorsRequest) ProtoMessage()    {}
func (*QueryGetValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{6}
}
func (m *QueryGetValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorsRequest.Merge(m, src)
}
func (m *QueryGetValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorsRequest proto.InternalMessageInfo

func (m *QueryGetValidatorsRequest) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

type QueryGetValidatorsResponse struct {
	Validators *Validators `protobuf:"bytes,1,opt,name=validators,proto3" json:"validators,omitempty"`
}

func (m *QueryGetValidatorsResponse) Reset()         { *m = QueryGetValidatorsResponse{} }
func (m *QueryGetValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorsResponse) ProtoMessage()    {}
func (*QueryGetValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{7}
}
func (m *QueryGetValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorsResponse.Merge(m, src)
}
func (m *QueryGetValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorsResponse proto.InternalMessageInfo

func (m *QueryGetValidatorsResponse) GetValidators() *Validators {
	if m != nil {
		return m.Validators
	}
	return nil
}

type QueryAllValidatorsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorsRequest) Reset()         { *m = QueryAllValidatorsRequest{} }
func (m *QueryAllValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorsRequest) ProtoMessage()    {}
func (*QueryAllValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{8}
}
func (m *QueryAllValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorsRequest.Merge(m, src)
}
func (m *QueryAllValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorsRequest proto.InternalMessageInfo

func (m *QueryAllValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidatorsResponse struct {
	AllValidators []*Validators       `protobuf:"bytes,1,rep,name=all_validators,json=allValidators,proto3" json:"all_validators,omitempty"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorsResponse) Reset()         { *m = QueryAllValidatorsResponse{} }
func (m *QueryAllValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorsResponse) ProtoMessage()    {}
func (*QueryAllValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{9}
}
func (m *QueryAllValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorsResponse.Merge(m, src)
}
func (m *QueryAllValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorsResponse proto.InternalMessageInfo

func (m *QueryAllValidatorsResponse) GetAllValidators() []*Validators {
	if m != nil {
		return m.AllValidators
	}
	return nil
}

func (m *QueryAllValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetQuotaRequest struct {
	QueryLength int32              `protobuf:"varint,1,opt,name=query_length,json=queryLength,proto3" json:"query_length,omitempty"`
	Pagination  *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryGetQuotaRequest) Reset()         { *m = QueryGetQuotaRequest{} }
func (m *QueryGetQuotaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetQuotaRequest) ProtoMessage()    {}
func (*QueryGetQuotaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{10}
}
func (m *QueryGetQuotaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQuotaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQuotaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQuotaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQuotaRequest.Merge(m, src)
}
func (m *QueryGetQuotaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQuotaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQuotaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQuotaRequest proto.InternalMessageInfo

func (m *QueryGetQuotaRequest) GetQueryLength() int32 {
	if m != nil {
		return m.QueryLength
	}
	return 0
}

func (m *QueryGetQuotaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetQuotaResponse struct {
	CoinQuotaResponse CoinsQuota `protobuf:"bytes,1,opt,name=coinQuotaResponse,proto3" json:"coinQuotaResponse"`
}

func (m *QueryGetQuotaResponse) Reset()         { *m = QueryGetQuotaResponse{} }
func (m *QueryGetQuotaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetQuotaResponse) ProtoMessage()    {}
func (*QueryGetQuotaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{11}
}
func (m *QueryGetQuotaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetQuotaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetQuotaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetQuotaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetQuotaResponse.Merge(m, src)
}
func (m *QueryGetQuotaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetQuotaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetQuotaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetQuotaResponse proto.InternalMessageInfo

func (m *QueryGetQuotaResponse) GetCoinQuotaResponse() CoinsQuota {
	if m != nil {
		return m.CoinQuotaResponse
	}
	return CoinsQuota{}
}

// this line is used by starport scaffolding # 3
type QueryGetIssueTokenRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetIssueTokenRequest) Reset()         { *m = QueryGetIssueTokenRequest{} }
func (m *QueryGetIssueTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssueTokenRequest) ProtoMessage()    {}
func (*QueryGetIssueTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{12}
}
func (m *QueryGetIssueTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssueTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssueTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssueTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssueTokenRequest.Merge(m, src)
}
func (m *QueryGetIssueTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssueTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssueTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssueTokenRequest proto.InternalMessageInfo

func (m *QueryGetIssueTokenRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetIssueTokenResponse struct {
	IssueToken *IssueToken `protobuf:"bytes,1,opt,name=IssueToken,proto3" json:"IssueToken,omitempty"`
}

func (m *QueryGetIssueTokenResponse) Reset()         { *m = QueryGetIssueTokenResponse{} }
func (m *QueryGetIssueTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssueTokenResponse) ProtoMessage()    {}
func (*QueryGetIssueTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{13}
}
func (m *QueryGetIssueTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssueTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssueTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssueTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssueTokenResponse.Merge(m, src)
}
func (m *QueryGetIssueTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssueTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssueTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssueTokenResponse proto.InternalMessageInfo

func (m *QueryGetIssueTokenResponse) GetIssueToken() *IssueToken {
	if m != nil {
		return m.IssueToken
	}
	return nil
}

type QueryAllIssueTokenRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssueTokenRequest) Reset()         { *m = QueryAllIssueTokenRequest{} }
func (m *QueryAllIssueTokenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssueTokenRequest) ProtoMessage()    {}
func (*QueryAllIssueTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{14}
}
func (m *QueryAllIssueTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssueTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssueTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssueTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssueTokenRequest.Merge(m, src)
}
func (m *QueryAllIssueTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssueTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssueTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssueTokenRequest proto.InternalMessageInfo

func (m *QueryAllIssueTokenRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIssueTokenResponse struct {
	IssueToken []*IssueToken       `protobuf:"bytes,1,rep,name=IssueToken,proto3" json:"IssueToken,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssueTokenResponse) Reset()         { *m = QueryAllIssueTokenResponse{} }
func (m *QueryAllIssueTokenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssueTokenResponse) ProtoMessage()    {}
func (*QueryAllIssueTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{15}
}
func (m *QueryAllIssueTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssueTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssueTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssueTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssueTokenResponse.Merge(m, src)
}
func (m *QueryAllIssueTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssueTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssueTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssueTokenResponse proto.InternalMessageInfo

func (m *QueryAllIssueTokenResponse) GetIssueToken() []*IssueToken {
	if m != nil {
		return m.IssueToken
	}
	return nil
}

func (m *QueryAllIssueTokenResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreatePoolRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetCreatePoolRequest) Reset()         { *m = QueryGetCreatePoolRequest{} }
func (m *QueryGetCreatePoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreatePoolRequest) ProtoMessage()    {}
func (*QueryGetCreatePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{16}
}
func (m *QueryGetCreatePoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreatePoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreatePoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreatePoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreatePoolRequest.Merge(m, src)
}
func (m *QueryGetCreatePoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreatePoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreatePoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreatePoolRequest proto.InternalMessageInfo

func (m *QueryGetCreatePoolRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetCreatePoolResponse struct {
	CreatePool *PoolProposal `protobuf:"bytes,1,opt,name=CreatePool,proto3" json:"CreatePool,omitempty"`
}

func (m *QueryGetCreatePoolResponse) Reset()         { *m = QueryGetCreatePoolResponse{} }
func (m *QueryGetCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreatePoolResponse) ProtoMessage()    {}
func (*QueryGetCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{17}
}
func (m *QueryGetCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreatePoolResponse.Merge(m, src)
}
func (m *QueryGetCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreatePoolResponse proto.InternalMessageInfo

func (m *QueryGetCreatePoolResponse) GetCreatePool() *PoolProposal {
	if m != nil {
		return m.CreatePool
	}
	return nil
}

type PoolInfo struct {
	BlockHeight string        `protobuf:"bytes,1,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	CreatePool  *PoolProposal `protobuf:"bytes,2,opt,name=CreatePool,proto3" json:"CreatePool,omitempty"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{18}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetBlockHeight() string {
	if m != nil {
		return m.BlockHeight
	}
	return ""
}

func (m *PoolInfo) GetCreatePool() *PoolProposal {
	if m != nil {
		return m.CreatePool
	}
	return nil
}

type QueryLastPoolResponse struct {
	Pools []*PoolInfo `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *QueryLastPoolResponse) Reset()         { *m = QueryLastPoolResponse{} }
func (m *QueryLastPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastPoolResponse) ProtoMessage()    {}
func (*QueryLastPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{19}
}
func (m *QueryLastPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastPoolResponse.Merge(m, src)
}
func (m *QueryLastPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastPoolResponse proto.InternalMessageInfo

func (m *QueryLastPoolResponse) GetPools() []*PoolInfo {
	if m != nil {
		return m.Pools
	}
	return nil
}

type QueryAllCreatePoolRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreatePoolRequest) Reset()         { *m = QueryAllCreatePoolRequest{} }
func (m *QueryAllCreatePoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreatePoolRequest) ProtoMessage()    {}
func (*QueryAllCreatePoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{20}
}
func (m *QueryAllCreatePoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreatePoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreatePoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreatePoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreatePoolRequest.Merge(m, src)
}
func (m *QueryAllCreatePoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreatePoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreatePoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreatePoolRequest proto.InternalMessageInfo

func (m *QueryAllCreatePoolRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLatestPoolRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLatestPoolRequest) Reset()         { *m = QueryLatestPoolRequest{} }
func (m *QueryLatestPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestPoolRequest) ProtoMessage()    {}
func (*QueryLatestPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{21}
}
func (m *QueryLatestPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestPoolRequest.Merge(m, src)
}
func (m *QueryLatestPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestPoolRequest proto.InternalMessageInfo

func (m *QueryLatestPoolRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreatePoolResponse struct {
	CreatePool []*PoolProposal     `protobuf:"bytes,1,rep,name=CreatePool,proto3" json:"CreatePool,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreatePoolResponse) Reset()         { *m = QueryAllCreatePoolResponse{} }
func (m *QueryAllCreatePoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreatePoolResponse) ProtoMessage()    {}
func (*QueryAllCreatePoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5dbf5c30d8f2c3da, []int{22}
}
func (m *QueryAllCreatePoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreatePoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreatePoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreatePoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreatePoolResponse.Merge(m, src)
}
func (m *QueryAllCreatePoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreatePoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreatePoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreatePoolResponse proto.InternalMessageInfo

func (m *QueryAllCreatePoolResponse) GetCreatePool() []*PoolProposal {
	if m != nil {
		return m.CreatePool
	}
	return nil
}

func (m *QueryAllCreatePoolResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPendingFeeRequest)(nil), "oppyfinance.oppychain.vault.QueryPendingFeeRequest")
	proto.RegisterType((*QueryPendingFeeResponse)(nil), "oppyfinance.oppychain.vault.QueryPendingFeeResponse")
	proto.RegisterType((*QueryGetOutboundTxRequest)(nil), "oppyfinance.oppychain.vault.QueryGetOutboundTxRequest")
	proto.RegisterType((*QueryGetOutboundTxResponse)(nil), "oppyfinance.oppychain.vault.QueryGetOutboundTxResponse")
	proto.RegisterType((*QueryAllOutboundTxRequest)(nil), "oppyfinance.oppychain.vault.QueryAllOutboundTxRequest")
	proto.RegisterType((*QueryAllOutboundTxResponse)(nil), "oppyfinance.oppychain.vault.QueryAllOutboundTxResponse")
	proto.RegisterType((*QueryGetValidatorsRequest)(nil), "oppyfinance.oppychain.vault.QueryGetValidatorsRequest")
	proto.RegisterType((*QueryGetValidatorsResponse)(nil), "oppyfinance.oppychain.vault.QueryGetValidatorsResponse")
	proto.RegisterType((*QueryAllValidatorsRequest)(nil), "oppyfinance.oppychain.vault.QueryAllValidatorsRequest")
	proto.RegisterType((*QueryAllValidatorsResponse)(nil), "oppyfinance.oppychain.vault.QueryAllValidatorsResponse")
	proto.RegisterType((*QueryGetQuotaRequest)(nil), "oppyfinance.oppychain.vault.QueryGetQuotaRequest")
	proto.RegisterType((*QueryGetQuotaResponse)(nil), "oppyfinance.oppychain.vault.QueryGetQuotaResponse")
	proto.RegisterType((*QueryGetIssueTokenRequest)(nil), "oppyfinance.oppychain.vault.QueryGetIssueTokenRequest")
	proto.RegisterType((*QueryGetIssueTokenResponse)(nil), "oppyfinance.oppychain.vault.QueryGetIssueTokenResponse")
	proto.RegisterType((*QueryAllIssueTokenRequest)(nil), "oppyfinance.oppychain.vault.QueryAllIssueTokenRequest")
	proto.RegisterType((*QueryAllIssueTokenResponse)(nil), "oppyfinance.oppychain.vault.QueryAllIssueTokenResponse")
	proto.RegisterType((*QueryGetCreatePoolRequest)(nil), "oppyfinance.oppychain.vault.QueryGetCreatePoolRequest")
	proto.RegisterType((*QueryGetCreatePoolResponse)(nil), "oppyfinance.oppychain.vault.QueryGetCreatePoolResponse")
	proto.RegisterType((*PoolInfo)(nil), "oppyfinance.oppychain.vault.poolInfo")
	proto.RegisterType((*QueryLastPoolResponse)(nil), "oppyfinance.oppychain.vault.QueryLastPoolResponse")
	proto.RegisterType((*QueryAllCreatePoolRequest)(nil), "oppyfinance.oppychain.vault.QueryAllCreatePoolRequest")
	proto.RegisterType((*QueryLatestPoolRequest)(nil), "oppyfinance.oppychain.vault.QueryLatestPoolRequest")
	proto.RegisterType((*QueryAllCreatePoolResponse)(nil), "oppyfinance.oppychain.vault.QueryAllCreatePoolResponse")
}

func init() { proto.RegisterFile("vault/query.proto", fileDescriptor_5dbf5c30d8f2c3da) }

var fileDescriptor_5dbf5c30d8f2c3da = []byte{
	// 1144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xaf, 0x1b, 0x3a, 0xb6, 0x13, 0x0a, 0xec, 0x52, 0xf6, 0x27, 0x4c, 0x59, 0x67, 0xd8, 0x9a,
	0x4d, 0xd4, 0x5e, 0x5b, 0x18, 0x20, 0x24, 0xa4, 0x75, 0x68, 0x21, 0x52, 0x81, 0x2e, 0xaa, 0x78,
	0x80, 0x87, 0x70, 0x93, 0xdc, 0x3a, 0x56, 0x3c, 0x5f, 0x2f, 0xbe, 0x29, 0xad, 0xaa, 0x3e, 0xc0,
	0x17, 0x00, 0x89, 0x4f, 0xc0, 0x23, 0x43, 0x0c, 0x90, 0xc6, 0x77, 0x18, 0x6f, 0x93, 0x78, 0xe1,
	0x09, 0x50, 0xcb, 0x07, 0x41, 0xbe, 0xbe, 0xce, 0xbd, 0x8e, 0xdd, 0xe4, 0x36, 0xcb, 0x53, 0x9d,
	0x63, 0xff, 0xce, 0xfd, 0x9d, 0xdf, 0x39, 0x3e, 0xe7, 0xd4, 0x70, 0x76, 0x07, 0xf7, 0x3d, 0x66,
	0x3f, 0xe8, 0x93, 0xde, 0x9e, 0x15, 0xf4, 0x28, 0xa3, 0xe8, 0x35, 0x1a, 0x04, 0x7b, 0xdb, 0xae,
	0x8f, 0xfd, 0x16, 0xb1, 0xa2, 0xeb, 0x56, 0x07, 0xbb, 0xbe, 0xc5, 0x1f, 0x2c, 0x5d, 0x72, 0x28,
	0x75, 0x3c, 0x62, 0xe3, 0xc0, 0xb5, 0xb1, 0xef, 0x53, 0x86, 0x99, 0x4b, 0xfd, 0x30, 0x86, 0x96,
	0x6e, 0xb4, 0x68, 0x78, 0x9f, 0x86, 0x76, 0x13, 0x87, 0x24, 0xf6, 0x69, 0xef, 0xac, 0x34, 0x09,
	0xc3, 0x2b, 0x76, 0x80, 0x1d, 0xd7, 0xe7, 0x0f, 0x8b, 0x67, 0xcf, 0xc7, 0x27, 0xd3, 0x3e, 0x6b,
	0xd2, 0xbe, 0xdf, 0x6e, 0xb0, 0x5d, 0x71, 0x63, 0xc1, 0xa1, 0x0e, 0xe5, 0x97, 0x76, 0x74, 0x95,
	0x7e, 0xdc, 0x0d, 0xc3, 0x3e, 0x69, 0x30, 0xda, 0x25, 0x43, 0x7e, 0x5a, 0x3d, 0x82, 0x19, 0x69,
	0x04, 0x94, 0x7a, 0xe2, 0xc6, 0x2b, 0xf1, 0x8d, 0x90, 0xe1, 0xae, 0xeb, 0x3b, 0xc2, 0x38, 0x88,
	0x97, 0x32, 0x2c, 0x4c, 0x65, 0x95, 0x74, 0x42, 0xb7, 0x45, 0x5d, 0x71, 0x80, 0xf9, 0x25, 0x9c,
	0xbb, 0x17, 0x85, 0xb2, 0x49, 0xfc, 0xb6, 0xeb, 0x3b, 0x77, 0x09, 0xa9, 0x93, 0x07, 0x7d, 0x12,
	0x32, 0x74, 0x17, 0x40, 0x86, 0x75, 0xc1, 0x58, 0x34, 0x2a, 0xc5, 0xd5, 0x6b, 0x56, 0xec, 0xce,
	0x8a, 0xdc, 0x59, 0xb1, 0xae, 0xc2, 0xa9, 0xb5, 0x89, 0x9d, 0x04, 0x5b, 0x57, 0x90, 0xe6, 0x1f,
	0x06, 0x9c, 0xcf, 0x1c, 0x11, 0x06, 0xd4, 0x0f, 0x09, 0x22, 0xf0, 0xfc, 0x36, 0x21, 0x11, 0x9d,
	0x0b, 0xc6, 0x62, 0xa1, 0x52, 0x5c, 0xbd, 0x98, 0x3a, 0x20, 0x71, 0x7d, 0x87, 0xba, 0xfe, 0xfa,
	0xcd, 0x27, 0x7f, 0x5f, 0x9e, 0x79, 0xf8, 0xcf, 0xe5, 0x8a, 0xe3, 0xb2, 0x4e, 0xbf, 0x69, 0xb5,
	0xe8, 0x7d, 0x5b, 0x04, 0x17, 0xff, 0x59, 0x0e, 0xdb, 0x5d, 0x9b, 0xed, 0x05, 0x24, 0xe4, 0x80,
	0xb0, 0x9e, 0xf8, 0x46, 0xd5, 0x54, 0x28, 0xb3, 0x3c, 0x94, 0xa5, 0xb1, 0xa1, 0xc4, 0x1c, 0x53,
	0xb1, 0xbc, 0x07, 0x17, 0x79, 0x28, 0x55, 0xc2, 0x3e, 0x15, 0xa9, 0xdd, 0xda, 0x4d, 0x04, 0xbb,
	0x04, 0x67, 0x7a, 0xf1, 0x65, 0xed, 0x43, 0xae, 0xd7, 0x99, 0xba, 0x34, 0x98, 0x5d, 0x28, 0xe5,
	0x41, 0x85, 0x10, 0x1f, 0x03, 0xd0, 0x81, 0x55, 0x88, 0xbd, 0x64, 0x8d, 0xa8, 0x55, 0x4b, 0x3a,
	0x59, 0x7f, 0x2e, 0x52, 0xa6, 0xae, 0x38, 0x30, 0x5b, 0x82, 0xe7, 0x6d, 0xcf, 0xcb, 0xf2, 0x9c,
	0x56, 0x62, 0x1f, 0x1b, 0x22, 0xa4, 0xa1, 0x53, 0x8e, 0x09, 0xa9, 0xf0, 0x4c, 0x21, 0x4d, 0x2f,
	0x87, 0x6b, 0x32, 0x87, 0x9f, 0x61, 0xcf, 0x6d, 0x63, 0x46, 0x7b, 0x61, 0xa2, 0xcd, 0x39, 0x38,
	0xd5, 0x21, 0xae, 0xd3, 0x61, 0x22, 0x81, 0xe2, 0x97, 0x49, 0x64, 0xf6, 0x54, 0x90, 0x08, 0xb5,
	0x0a, 0xb0, 0x33, 0xb0, 0x6a, 0x65, 0x4f, 0x71, 0xa2, 0x40, 0xd5, 0xbc, 0x65, 0xb9, 0x4d, 0x2b,
	0x6f, 0xbf, 0x2b, 0x79, 0xcb, 0x09, 0xe6, 0x13, 0x78, 0x11, 0x7b, 0x5e, 0x23, 0x15, 0x50, 0xe1,
	0x24, 0x01, 0xcd, 0x63, 0xd5, 0xef, 0xf4, 0x12, 0xf7, 0xb5, 0x01, 0x0b, 0x49, 0x12, 0xee, 0x45,
	0x2d, 0x2e, 0x11, 0xe6, 0x0a, 0xbc, 0xc0, 0x5d, 0x34, 0x3c, 0xe2, 0x3b, 0xac, 0xc3, 0xa5, 0x99,
	0xab, 0x17, 0xb9, 0x6d, 0x83, 0x9b, 0x86, 0xb4, 0x9b, 0x9d, 0x58, 0x3b, 0x06, 0xaf, 0x0e, 0x51,
	0x10, 0xaa, 0x7d, 0x01, 0x67, 0xa3, 0x56, 0x93, 0x32, 0x6a, 0x55, 0x42, 0x84, 0x0a, 0x39, 0x4c,
	0x14, 0x7d, 0xd6, 0x8f, 0xb9, 0x22, 0x4b, 0xb6, 0x16, 0x8d, 0x88, 0xad, 0x68, 0x42, 0x24, 0xd1,
	0x2f, 0xc0, 0x9c, 0xeb, 0xb7, 0xc9, 0xae, 0xa8, 0xd8, 0xf8, 0x87, 0x5a, 0xb0, 0x2a, 0x44, 0x16,
	0xac, 0xb4, 0x6a, 0xd1, 0x54, 0x9c, 0x28, 0x50, 0xb5, 0x60, 0xb3, 0xcc, 0xa6, 0x55, 0xb0, 0x8f,
	0x94, 0x82, 0xd5, 0x08, 0xa6, 0x30, 0x61, 0x30, 0xd3, 0xab, 0x54, 0x25, 0x5f, 0x77, 0xf8, 0xe4,
	0xde, 0xa4, 0xd4, 0x1b, 0x9d, 0x2f, 0x47, 0xe6, 0x4b, 0x85, 0x88, 0x10, 0x6b, 0x00, 0xd2, 0x2a,
	0x94, 0xbc, 0x3e, 0x32, 0xc4, 0xe8, 0xc1, 0xcd, 0x1e, 0x0d, 0x68, 0x88, 0xbd, 0xba, 0x02, 0x36,
	0xbf, 0x82, 0xd3, 0xd1, 0x1a, 0x51, 0xf3, 0xb7, 0x29, 0x5a, 0x84, 0xe2, 0xba, 0x47, 0x5b, 0xdd,
	0x8f, 0xd4, 0x96, 0xa7, 0x9a, 0x86, 0x0e, 0x9e, 0x7d, 0x96, 0x83, 0xb7, 0xc4, 0xab, 0xb3, 0x81,
	0x43, 0x96, 0x0a, 0xee, 0x7d, 0x98, 0x8b, 0x18, 0x25, 0x7d, 0xe6, 0xea, 0x48, 0xf7, 0x09, 0xf7,
	0x7a, 0x8c, 0x51, 0x0b, 0x30, 0x2b, 0xf5, 0xb4, 0x0a, 0x30, 0x59, 0x92, 0x36, 0x30, 0x23, 0x09,
	0xf9, 0xbc, 0x13, 0x26, 0xef, 0x2b, 0xbf, 0x2a, 0x25, 0xae, 0x91, 0xff, 0xc2, 0xc4, 0x69, 0x98,
	0x5a, 0x91, 0xaf, 0x7e, 0xfb, 0x12, 0xcc, 0x71, 0xca, 0xe8, 0xb1, 0x01, 0x20, 0x67, 0x37, 0xba,
	0x35, 0x92, 0xd8, 0xb1, 0xfb, 0x53, 0xe9, 0x9d, 0x13, 0xe3, 0x44, 0x7b, 0x7c, 0xfb, 0x9b, 0x3f,
	0xff, 0xfb, 0x7e, 0xd6, 0x46, 0xcb, 0x76, 0x04, 0xb2, 0x07, 0x48, 0x3b, 0xb3, 0x84, 0xdb, 0xfb,
	0x83, 0x85, 0xec, 0x00, 0xfd, 0x64, 0xc0, 0xbc, 0xf4, 0x76, 0xdb, 0xf3, 0x74, 0x98, 0xe7, 0x6d,
	0x54, 0x3a, 0xcc, 0x73, 0x77, 0x24, 0xf3, 0x3a, 0x67, 0xfe, 0x3a, 0xba, 0x32, 0x96, 0x39, 0x7a,
	0x64, 0xc0, 0x7c, 0x6a, 0xfb, 0xd0, 0xd4, 0x39, 0xb3, 0x47, 0x68, 0xea, 0x9c, 0xdd, 0x0c, 0xcc,
	0x37, 0x39, 0xdb, 0x6b, 0xe8, 0x8d, 0x7c, 0xb6, 0x0e, 0x61, 0xca, 0xd6, 0x80, 0x7e, 0x36, 0xe0,
	0xe5, 0x2a, 0x61, 0xa9, 0x25, 0x43, 0x53, 0xe1, 0x89, 0x38, 0xe7, 0x6e, 0x33, 0x66, 0x85, 0x73,
	0x36, 0xd1, 0x62, 0x3e, 0x67, 0x85, 0xef, 0x6f, 0x06, 0x9c, 0x4e, 0xc6, 0x3a, 0x5a, 0xd1, 0xd2,
	0x48, 0xdd, 0x42, 0x4a, 0xab, 0x27, 0x81, 0x08, 0x76, 0x1f, 0x70, 0x76, 0xef, 0xa2, 0x5b, 0x9c,
	0xd8, 0xb2, 0x00, 0xe7, 0x2a, 0xcb, 0xff, 0xa9, 0xb3, 0xf7, 0xd5, 0x45, 0xe7, 0x00, 0xfd, 0x62,
	0xa8, 0xb3, 0x4f, 0xb3, 0x22, 0x32, 0x83, 0x5a, 0xb3, 0x22, 0xb2, 0xa3, 0xd7, 0xbc, 0xc9, 0xf9,
	0xdf, 0x40, 0x95, 0x7c, 0x75, 0xdd, 0x01, 0xc2, 0xde, 0xe7, 0x63, 0xee, 0x00, 0x3d, 0x34, 0x60,
	0x5e, 0x3a, 0xd2, 0x7f, 0xe9, 0x26, 0x22, 0x9d, 0xbb, 0x2f, 0x8c, 0x2b, 0x09, 0x49, 0x9a, 0xcb,
	0xab, 0xb4, 0x4e, 0x3d, 0x79, 0x33, 0x63, 0x48, 0x53, 0xde, 0x6c, 0xdb, 0x1f, 0x27, 0x6f, 0x6b,
	0x80, 0x48, 0xc9, 0x2b, 0x1d, 0xe9, 0xcb, 0x3b, 0x11, 0xe9, 0xdc, 0x59, 0x35, 0x4e, 0x5e, 0x49,
	0x1a, 0xfd, 0x60, 0x40, 0xb1, 0x4a, 0x58, 0xb2, 0x10, 0xa0, 0xb5, 0xf1, 0x47, 0x66, 0x26, 0xb0,
	0xce, 0x6b, 0x37, 0xbc, 0x71, 0x8c, 0x6b, 0xbb, 0x8e, 0xc2, 0xe9, 0xc7, 0xb8, 0xed, 0xca, 0x6f,
	0x17, 0x3a, 0x2c, 0x33, 0x1f, 0x53, 0x4a, 0x6f, 0x9d, 0x0c, 0x24, 0x78, 0x2e, 0x73, 0x9e, 0x4b,
	0xe8, 0xea, 0xf1, 0x0d, 0x37, 0x88, 0x51, 0x8d, 0x6d, 0x42, 0xd6, 0x6b, 0x4f, 0x0e, 0xcb, 0xc6,
	0xd3, 0xc3, 0xb2, 0xf1, 0xef, 0x61, 0xd9, 0xf8, 0xee, 0xa8, 0x3c, 0xf3, 0xf4, 0xa8, 0x3c, 0xf3,
	0xd7, 0x51, 0x79, 0xe6, 0x73, 0xdb, 0x71, 0x99, 0x87, 0xe3, 0x6f, 0x26, 0xc7, 0x74, 0x9a, 0x5d,
	0xe1, 0x94, 0x7f, 0x40, 0x69, 0x9e, 0xe2, 0x5f, 0x87, 0xd6, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0xed, 0x71, 0x4f, 0x7c, 0x42, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a OutboundTx by index.
	OutboundTx(ctx context.Context, in *QueryGetOutboundTxRequest, opts ...grpc.CallOption) (*QueryGetOutboundTxResponse, error)
	// Queries a list of OutboundTx items.
	OutboundTxAll(ctx context.Context, in *QueryAllOutboundTxRequest, opts ...grpc.CallOption) (*QueryAllOutboundTxResponse, error)
	// Queries a list of GetValidators items.
	GetValidators(ctx context.Context, in *QueryGetValidatorsRequest, opts ...grpc.CallOption) (*QueryGetValidatorsResponse, error)
	// Queries a list of GetValidators items.
	GetAllValidators(ctx context.Context, in *QueryAllValidatorsRequest, opts ...grpc.CallOption) (*QueryAllValidatorsResponse, error)
	// Queries a list of GetQuota items.
	GetQuota(ctx context.Context, in *QueryGetQuotaRequest, opts ...grpc.CallOption) (*QueryGetQuotaResponse, error)
	// Queries a issueToken by index.
	IssueToken(ctx context.Context, in *QueryGetIssueTokenRequest, opts ...grpc.CallOption) (*QueryGetIssueTokenResponse, error)
	// Queries a list of issueToken items.
	IssueTokenAll(ctx context.Context, in *QueryAllIssueTokenRequest, opts ...grpc.CallOption) (*QueryAllIssueTokenResponse, error)
	// Queries a createPool by index.
	CreatePool(ctx context.Context, in *QueryGetCreatePoolRequest, opts ...grpc.CallOption) (*QueryGetCreatePoolResponse, error)
	// Queries a list of createPool items.
	CreatePoolAll(ctx context.Context, in *QueryAllCreatePoolRequest, opts ...grpc.CallOption) (*QueryAllCreatePoolResponse, error)
	// Queries a createPool by index.
	GetLastPool(ctx context.Context, in *QueryLatestPoolRequest, opts ...grpc.CallOption) (*QueryLastPoolResponse, error)
	// Queries the pending fee
	GetPendingFee(ctx context.Context, in *QueryPendingFeeRequest, opts ...grpc.CallOption) (*QueryPendingFeeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OutboundTx(ctx context.Context, in *QueryGetOutboundTxRequest, opts ...grpc.CallOption) (*QueryGetOutboundTxResponse, error) {
	out := new(QueryGetOutboundTxResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/OutboundTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutboundTxAll(ctx context.Context, in *QueryAllOutboundTxRequest, opts ...grpc.CallOption) (*QueryAllOutboundTxResponse, error) {
	out := new(QueryAllOutboundTxResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/OutboundTxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidators(ctx context.Context, in *QueryGetValidatorsRequest, opts ...grpc.CallOption) (*QueryGetValidatorsResponse, error) {
	out := new(QueryGetValidatorsResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/GetValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllValidators(ctx context.Context, in *QueryAllValidatorsRequest, opts ...grpc.CallOption) (*QueryAllValidatorsResponse, error) {
	out := new(QueryAllValidatorsResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/GetAllValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetQuota(ctx context.Context, in *QueryGetQuotaRequest, opts ...grpc.CallOption) (*QueryGetQuotaResponse, error) {
	out := new(QueryGetQuotaResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/GetQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssueToken(ctx context.Context, in *QueryGetIssueTokenRequest, opts ...grpc.CallOption) (*QueryGetIssueTokenResponse, error) {
	out := new(QueryGetIssueTokenResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/IssueToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssueTokenAll(ctx context.Context, in *QueryAllIssueTokenRequest, opts ...grpc.CallOption) (*QueryAllIssueTokenResponse, error) {
	out := new(QueryAllIssueTokenResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/IssueTokenAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreatePool(ctx context.Context, in *QueryGetCreatePoolRequest, opts ...grpc.CallOption) (*QueryGetCreatePoolResponse, error) {
	out := new(QueryGetCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/CreatePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreatePoolAll(ctx context.Context, in *QueryAllCreatePoolRequest, opts ...grpc.CallOption) (*QueryAllCreatePoolResponse, error) {
	out := new(QueryAllCreatePoolResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/CreatePoolAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastPool(ctx context.Context, in *QueryLatestPoolRequest, opts ...grpc.CallOption) (*QueryLastPoolResponse, error) {
	out := new(QueryLastPoolResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/GetLastPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPendingFee(ctx context.Context, in *QueryPendingFeeRequest, opts ...grpc.CallOption) (*QueryPendingFeeResponse, error) {
	out := new(QueryPendingFeeResponse)
	err := c.cc.Invoke(ctx, "/oppyfinance.oppychain.vault.Query/GetPendingFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a OutboundTx by index.
	OutboundTx(context.Context, *QueryGetOutboundTxRequest) (*QueryGetOutboundTxResponse, error)
	// Queries a list of OutboundTx items.
	OutboundTxAll(context.Context, *QueryAllOutboundTxRequest) (*QueryAllOutboundTxResponse, error)
	// Queries a list of GetValidators items.
	GetValidators(context.Context, *QueryGetValidatorsRequest) (*QueryGetValidatorsResponse, error)
	// Queries a list of GetValidators items.
	GetAllValidators(context.Context, *QueryAllValidatorsRequest) (*QueryAllValidatorsResponse, error)
	// Queries a list of GetQuota items.
	GetQuota(context.Context, *QueryGetQuotaRequest) (*QueryGetQuotaResponse, error)
	// Queries a issueToken by index.
	IssueToken(context.Context, *QueryGetIssueTokenRequest) (*QueryGetIssueTokenResponse, error)
	// Queries a list of issueToken items.
	IssueTokenAll(context.Context, *QueryAllIssueTokenRequest) (*QueryAllIssueTokenResponse, error)
	// Queries a createPool by index.
	CreatePool(context.Context, *QueryGetCreatePoolRequest) (*QueryGetCreatePoolResponse, error)
	// Queries a list of createPool items.
	CreatePoolAll(context.Context, *QueryAllCreatePoolRequest) (*QueryAllCreatePoolResponse, error)
	// Queries a createPool by index.
	GetLastPool(context.Context, *QueryLatestPoolRequest) (*QueryLastPoolResponse, error)
	// Queries the pending fee
	GetPendingFee(context.Context, *QueryPendingFeeRequest) (*QueryPendingFeeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OutboundTx(ctx context.Context, req *QueryGetOutboundTxRequest) (*QueryGetOutboundTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundTx not implemented")
}
func (*UnimplementedQueryServer) OutboundTxAll(ctx context.Context, req *QueryAllOutboundTxRequest) (*QueryAllOutboundTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundTxAll not implemented")
}
func (*UnimplementedQueryServer) GetValidators(ctx context.Context, req *QueryGetValidatorsRequest) (*QueryGetValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidators not implemented")
}
func (*UnimplementedQueryServer) GetAllValidators(ctx context.Context, req *QueryAllValidatorsRequest) (*QueryAllValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllValidators not implemented")
}
func (*UnimplementedQueryServer) GetQuota(ctx context.Context, req *QueryGetQuotaRequest) (*QueryGetQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuota not implemented")
}
func (*UnimplementedQueryServer) IssueToken(ctx context.Context, req *QueryGetIssueTokenRequest) (*QueryGetIssueTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueToken not implemented")
}
func (*UnimplementedQueryServer) IssueTokenAll(ctx context.Context, req *QueryAllIssueTokenRequest) (*QueryAllIssueTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokenAll not implemented")
}
func (*UnimplementedQueryServer) CreatePool(ctx context.Context, req *QueryGetCreatePoolRequest) (*QueryGetCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (*UnimplementedQueryServer) CreatePoolAll(ctx context.Context, req *QueryAllCreatePoolRequest) (*QueryAllCreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoolAll not implemented")
}
func (*UnimplementedQueryServer) GetLastPool(ctx context.Context, req *QueryLatestPoolRequest) (*QueryLastPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastPool not implemented")
}
func (*UnimplementedQueryServer) GetPendingFee(ctx context.Context, req *QueryPendingFeeRequest) (*QueryPendingFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingFee not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OutboundTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOutboundTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/OutboundTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundTx(ctx, req.(*QueryGetOutboundTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutboundTxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOutboundTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutboundTxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/OutboundTxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutboundTxAll(ctx, req.(*QueryAllOutboundTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/GetValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidators(ctx, req.(*QueryGetValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/GetAllValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllValidators(ctx, req.(*QueryAllValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/GetQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetQuota(ctx, req.(*QueryGetQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssueToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssueToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/IssueToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssueToken(ctx, req.(*QueryGetIssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssueTokenAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssueTokenAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/IssueTokenAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssueTokenAll(ctx, req.(*QueryAllIssueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/CreatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreatePool(ctx, req.(*QueryGetCreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreatePoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreatePoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/CreatePoolAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreatePoolAll(ctx, req.(*QueryAllCreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/GetLastPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastPool(ctx, req.(*QueryLatestPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPendingFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPendingFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oppyfinance.oppychain.vault.Query/GetPendingFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPendingFee(ctx, req.(*QueryPendingFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oppyfinance.oppychain.vault.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutboundTx",
			Handler:    _Query_OutboundTx_Handler,
		},
		{
			MethodName: "OutboundTxAll",
			Handler:    _Query_OutboundTxAll_Handler,
		},
		{
			MethodName: "GetValidators",
			Handler:    _Query_GetValidators_Handler,
		},
		{
			MethodName: "GetAllValidators",
			Handler:    _Query_GetAllValidators_Handler,
		},
		{
			MethodName: "GetQuota",
			Handler:    _Query_GetQuota_Handler,
		},
		{
			MethodName: "IssueToken",
			Handler:    _Query_IssueToken_Handler,
		},
		{
			MethodName: "IssueTokenAll",
			Handler:    _Query_IssueTokenAll_Handler,
		},
		{
			MethodName: "CreatePool",
			Handler:    _Query_CreatePool_Handler,
		},
		{
			MethodName: "CreatePoolAll",
			Handler:    _Query_CreatePoolAll_Handler,
		},
		{
			MethodName: "GetLastPool",
			Handler:    _Query_GetLastPool_Handler,
		},
		{
			MethodName: "GetPendingFee",
			Handler:    _Query_GetPendingFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vault/query.proto",
}

func (m *QueryPendingFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Feecoin) > 0 {
		for iNdEx := len(m.Feecoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feecoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOutboundTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOutboundTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOutboundTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutboundTx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOutboundTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOutboundTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOutboundTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutboundTx) > 0 {
		for iNdEx := len(m.OutboundTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Height) > 0 {
		i -= len(m.Height)
		copy(dAtA[i:], m.Height)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Height)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Validators != nil {
		{
			size, err := m.Validators.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllValidators) > 0 {
		for iNdEx := len(m.AllValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQuotaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQuotaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQuotaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QueryLength != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.QueryLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetQuotaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetQuotaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetQuotaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CoinQuotaResponse.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIssueTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssueTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssueTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssueTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssueTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssueTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssueToken != nil {
		{
			size, err := m.IssueToken.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssueTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssueTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssueTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssueTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssueTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssueTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssueToken) > 0 {
		for iNdEx := len(m.IssueToken) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IssueToken[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreatePoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreatePoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreatePoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatePool != nil {
		{
			size, err := m.CreatePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatePool != nil {
		{
			size, err := m.CreatePool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHeight) > 0 {
		i -= len(m.BlockHeight)
		copy(dAtA[i:], m.BlockHeight)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHeight)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreatePoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreatePoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreatePoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreatePoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreatePoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreatePoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatePool) > 0 {
		for iNdEx := len(m.CreatePool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreatePool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPendingFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Feecoin) > 0 {
		for _, e := range m.Feecoin {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOutboundTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetOutboundTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutboundTx.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllOutboundTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOutboundTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutboundTx) > 0 {
		for _, e := range m.OutboundTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Height)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Validators != nil {
		l = m.Validators.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllValidators) > 0 {
		for _, e := range m.AllValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetQuotaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryLength != 0 {
		n += 1 + sovQuery(uint64(m.QueryLength))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetQuotaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CoinQuotaResponse.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIssueTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetIssueTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssueToken != nil {
		l = m.IssueToken.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssueTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssueTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IssueToken) > 0 {
		for _, e := range m.IssueToken {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreatePoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatePool != nil {
		l = m.CreatePool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHeight)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CreatePool != nil {
		l = m.CreatePool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllCreatePoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLatestPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreatePoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreatePool) > 0 {
		for _, e := range m.CreatePool {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPendingFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feecoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feecoin = append(m.Feecoin, types.Coin{})
			if err := m.Feecoin[len(m.Feecoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOutboundTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOutboundTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOutboundTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOutboundTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOutboundTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOutboundTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTx = append(m.OutboundTx, OutboundTx{})
			if err := m.OutboundTx[len(m.OutboundTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Height = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validators == nil {
				m.Validators = &Validators{}
			}
			if err := m.Validators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllValidators = append(m.AllValidators, &Validators{})
			if err := m.AllValidators[len(m.AllValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQuotaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQuotaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQuotaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryLength", wireType)
			}
			m.QueryLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetQuotaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetQuotaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetQuotaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinQuotaResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoinQuotaResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssueTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssueTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssueTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssueTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssueTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssueTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssueToken == nil {
				m.IssueToken = &IssueToken{}
			}
			if err := m.IssueToken.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssueTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssueTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssueTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssueTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssueTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssueTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssueToken = append(m.IssueToken, &IssueToken{})
			if err := m.IssueToken[len(m.IssueToken)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreatePoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreatePoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreatePoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatePool == nil {
				m.CreatePool = &PoolProposal{}
			}
			if err := m.CreatePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: poolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: poolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatePool == nil {
				m.CreatePool = &PoolProposal{}
			}
			if err := m.CreatePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &PoolInfo{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreatePoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreatePoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreatePoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreatePoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreatePoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreatePoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatePool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatePool = append(m.CreatePool, &PoolProposal{})
			if err := m.CreatePool[len(m.CreatePool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
