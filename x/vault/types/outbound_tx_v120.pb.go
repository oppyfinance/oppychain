// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vault/outbound_tx_v120.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntityV120 struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Feecoin github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,2,rep,name=feecoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"feecoin"`
}

func (m *EntityV120) Reset()         { *m = EntityV120{} }
func (m *EntityV120) String() string { return proto.CompactTextString(m) }
func (*EntityV120) ProtoMessage()    {}
func (*EntityV120) Descriptor() ([]byte, []int) {
	return fileDescriptor_0938b92a473abb29, []int{0}
}
func (m *EntityV120) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityV120) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityV120.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityV120) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityV120.Merge(m, src)
}
func (m *EntityV120) XXX_Size() int {
	return m.Size()
}
func (m *EntityV120) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityV120.DiscardUnknown(m)
}

var xxx_messageInfo_EntityV120 proto.InternalMessageInfo

func (m *EntityV120) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EntityV120) GetFeecoin() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Feecoin
	}
	return nil
}

type ProposalsV120 struct {
	Entry []*EntityV120 `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (m *ProposalsV120) Reset()         { *m = ProposalsV120{} }
func (m *ProposalsV120) String() string { return proto.CompactTextString(m) }
func (*ProposalsV120) ProtoMessage()    {}
func (*ProposalsV120) Descriptor() ([]byte, []int) {
	return fileDescriptor_0938b92a473abb29, []int{1}
}
func (m *ProposalsV120) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalsV120) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalsV120.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalsV120) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalsV120.Merge(m, src)
}
func (m *ProposalsV120) XXX_Size() int {
	return m.Size()
}
func (m *ProposalsV120) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalsV120.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalsV120 proto.InternalMessageInfo

func (m *ProposalsV120) GetEntry() []*EntityV120 {
	if m != nil {
		return m.Entry
	}
	return nil
}

type OutboundTxV120 struct {
	Index     string                   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Processed bool                     `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
	Items     map[string]ProposalsV120 `protobuf:"bytes,3,rep,name=items,proto3" json:"items" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *OutboundTxV120) Reset()         { *m = OutboundTxV120{} }
func (m *OutboundTxV120) String() string { return proto.CompactTextString(m) }
func (*OutboundTxV120) ProtoMessage()    {}
func (*OutboundTxV120) Descriptor() ([]byte, []int) {
	return fileDescriptor_0938b92a473abb29, []int{2}
}
func (m *OutboundTxV120) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTxV120) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTxV120.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTxV120) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTxV120.Merge(m, src)
}
func (m *OutboundTxV120) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTxV120) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTxV120.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTxV120 proto.InternalMessageInfo

func (m *OutboundTxV120) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *OutboundTxV120) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

func (m *OutboundTxV120) GetItems() map[string]ProposalsV120 {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*EntityV120)(nil), "oppyfinance.oppychain.vault.entityV120")
	proto.RegisterType((*ProposalsV120)(nil), "oppyfinance.oppychain.vault.proposalsV120")
	proto.RegisterType((*OutboundTxV120)(nil), "oppyfinance.oppychain.vault.OutboundTxV120")
	proto.RegisterMapType((map[string]ProposalsV120)(nil), "oppyfinance.oppychain.vault.OutboundTxV120.ItemsEntry")
}

func init() { proto.RegisterFile("vault/outbound_tx_v120.proto", fileDescriptor_0938b92a473abb29) }

var fileDescriptor_0938b92a473abb29 = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0xad, 0x75, 0xdd, 0x59, 0x15, 0x09, 0x7b, 0x88, 0x75, 0x49, 0x4b, 0x2f, 0x16,
	0xa1, 0x33, 0x4d, 0x05, 0x11, 0x41, 0x70, 0x2b, 0x1e, 0x16, 0x41, 0x21, 0x88, 0x07, 0x2f, 0xcb,
	0x64, 0xf2, 0xb6, 0x3b, 0x6c, 0x3b, 0x13, 0x32, 0x93, 0x92, 0x7c, 0x0b, 0x3f, 0x87, 0x9f, 0xc2,
	0xe3, 0x1e, 0xf7, 0xe8, 0x69, 0x95, 0xf6, 0x5b, 0x78, 0x10, 0x99, 0x99, 0xac, 0x65, 0x2f, 0xc5,
	0x53, 0x5e, 0x32, 0xf9, 0xff, 0xfe, 0xff, 0x79, 0xef, 0xe1, 0xa3, 0x15, 0x2b, 0x17, 0x86, 0xaa,
	0xd2, 0xa4, 0xaa, 0x94, 0xd9, 0xa9, 0xa9, 0x4e, 0x57, 0xf1, 0x74, 0x42, 0xf2, 0x42, 0x19, 0x15,
	0x3c, 0x51, 0x79, 0x5e, 0x9f, 0x09, 0xc9, 0x24, 0x07, 0x62, 0x6b, 0x7e, 0xce, 0x84, 0x24, 0x4e,
	0xd3, 0x3b, 0x9c, 0xab, 0xb9, 0x72, 0xff, 0x51, 0x5b, 0x79, 0x49, 0x2f, 0xe2, 0x4a, 0x2f, 0x95,
	0xa6, 0x29, 0xd3, 0x40, 0x57, 0x71, 0x0a, 0x86, 0xc5, 0x94, 0x2b, 0x21, 0xfd, 0xf9, 0xf0, 0x3b,
	0xc2, 0x18, 0xa4, 0x11, 0xa6, 0xfe, 0x1c, 0x4f, 0x27, 0xc1, 0x7b, 0xbc, 0xc7, 0xb2, 0xac, 0x00,
	0xad, 0x43, 0x34, 0x40, 0xa3, 0xfb, 0xb3, 0xf8, 0xf7, 0x75, 0x7f, 0x3c, 0x17, 0xe6, 0xbc, 0x4c,
	0x09, 0x57, 0x4b, 0xda, 0xe0, 0xfc, 0x63, 0xac, 0xb3, 0x0b, 0x6a, 0xea, 0x1c, 0x34, 0x39, 0xe6,
	0xfc, 0xd8, 0x0b, 0x93, 0x1b, 0x42, 0x00, 0x78, 0xef, 0x0c, 0xc0, 0x9a, 0x85, 0xed, 0x41, 0x67,
	0x74, 0x30, 0x7d, 0x4c, 0xbc, 0x8e, 0xd8, 0x34, 0xa4, 0x49, 0x43, 0xde, 0x2a, 0x21, 0x67, 0x93,
	0xcb, 0xeb, 0x7e, 0xeb, 0xdb, 0xcf, 0xfe, 0xe8, 0x3f, 0xbc, 0xac, 0x40, 0x27, 0x37, 0xec, 0xe1,
	0x07, 0xfc, 0x20, 0x2f, 0x54, 0xae, 0x34, 0x5b, 0x68, 0x77, 0x89, 0xd7, 0xb8, 0x0b, 0xd2, 0x14,
	0x75, 0x88, 0x9c, 0xeb, 0x53, 0xb2, 0xa3, 0x6d, 0x64, 0x7b, 0xf9, 0xc4, 0xab, 0x86, 0x7f, 0x10,
	0x7e, 0xf8, 0xb1, 0x19, 0xc0, 0xa7, 0xca, 0x11, 0x0f, 0x71, 0x57, 0xc8, 0x0c, 0x2a, 0xd7, 0x94,
	0xfd, 0xc4, 0xbf, 0x04, 0x47, 0x78, 0x3f, 0x2f, 0x14, 0x07, 0xad, 0x21, 0x0b, 0xdb, 0x03, 0x34,
	0xba, 0x97, 0x6c, 0x3f, 0x04, 0x09, 0xee, 0x0a, 0x03, 0x4b, 0x1d, 0x76, 0x5c, 0x8a, 0x17, 0x3b,
	0x53, 0xdc, 0xf6, 0x23, 0x27, 0x56, 0xf8, 0xce, 0xa6, 0x99, 0xdd, 0xb1, 0x8d, 0x49, 0x3c, 0xaa,
	0x97, 0x61, 0xbc, 0x3d, 0x0a, 0x1e, 0xe1, 0xce, 0x05, 0xd4, 0x4d, 0x26, 0x5b, 0x06, 0x6f, 0x70,
	0x77, 0xc5, 0x16, 0x25, 0xb8, 0x34, 0x07, 0xd3, 0x67, 0x3b, 0x3d, 0x6f, 0x35, 0x2d, 0xf1, 0xc2,
	0x57, 0xed, 0x97, 0x68, 0x76, 0x72, 0xb9, 0x8e, 0xd0, 0xd5, 0x3a, 0x42, 0xbf, 0xd6, 0x11, 0xfa,
	0xba, 0x89, 0x5a, 0x57, 0x9b, 0xa8, 0xf5, 0x63, 0x13, 0xb5, 0xbe, 0xd0, 0xb9, 0x30, 0x0b, 0xe6,
	0xa7, 0x63, 0x71, 0xe3, 0x86, 0x4d, 0xff, 0xb1, 0x69, 0x45, 0xfd, 0x0a, 0xbb, 0x51, 0xa5, 0x77,
	0xdd, 0x96, 0x3d, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x9e, 0xe1, 0x40, 0xd8, 0x02, 0x00,
	0x00,
}

func (m *EntityV120) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityV120) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityV120) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feecoin) > 0 {
		for iNdEx := len(m.Feecoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feecoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV120(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOutboundTxV120(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalsV120) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalsV120) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalsV120) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for iNdEx := len(m.Entry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV120(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTxV120) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTxV120) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTxV120) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV120(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOutboundTxV120(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutboundTxV120(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Processed {
		i--
		if m.Processed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintOutboundTxV120(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutboundTxV120(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutboundTxV120(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EntityV120) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOutboundTxV120(uint64(l))
	}
	if len(m.Feecoin) > 0 {
		for _, e := range m.Feecoin {
			l = e.Size()
			n += 1 + l + sovOutboundTxV120(uint64(l))
		}
	}
	return n
}

func (m *ProposalsV120) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for _, e := range m.Entry {
			l = e.Size()
			n += 1 + l + sovOutboundTxV120(uint64(l))
		}
	}
	return n
}

func (m *OutboundTxV120) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovOutboundTxV120(uint64(l))
	}
	if m.Processed {
		n += 2
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovOutboundTxV120(uint64(len(k))) + 1 + l + sovOutboundTxV120(uint64(l))
			n += mapEntrySize + 1 + sovOutboundTxV120(uint64(mapEntrySize))
		}
	}
	return n
}

func sovOutboundTxV120(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutboundTxV120(x uint64) (n int) {
	return sovOutboundTxV120(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntityV120) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutboundTxV120
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: entityV120: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: entityV120: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feecoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feecoin = append(m.Feecoin, types.Coin{})
			if err := m.Feecoin[len(m.Feecoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutboundTxV120(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalsV120) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutboundTxV120
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: proposalsV120: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: proposalsV120: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = append(m.Entry, &EntityV120{})
			if err := m.Entry[len(m.Entry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutboundTxV120(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTxV120) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutboundTxV120
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTxV120: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTxV120: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[string]ProposalsV120)
			}
			var mapkey string
			mapvalue := &ProposalsV120{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutboundTxV120
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutboundTxV120
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutboundTxV120
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutboundTxV120
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutboundTxV120
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutboundTxV120
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutboundTxV120
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProposalsV120{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutboundTxV120(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthOutboundTxV120
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutboundTxV120(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutboundTxV120
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutboundTxV120(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutboundTxV120
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutboundTxV120
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutboundTxV120
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutboundTxV120
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutboundTxV120
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutboundTxV120        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutboundTxV120          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutboundTxV120 = fmt.Errorf("proto: unexpected end of group")
)
