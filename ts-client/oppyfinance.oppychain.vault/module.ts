// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateOutboundTx } from "./types/vault/tx";
import { MsgCreateCreatePool } from "./types/vault/tx";
import { MsgCreateIssueToken } from "./types/vault/tx";


export { MsgCreateOutboundTx, MsgCreateCreatePool, MsgCreateIssueToken };

type sendMsgCreateOutboundTxParams = {
  value: MsgCreateOutboundTx,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateCreatePoolParams = {
  value: MsgCreateCreatePool,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateIssueTokenParams = {
  value: MsgCreateIssueToken,
  fee?: StdFee,
  memo?: string
};


type msgCreateOutboundTxParams = {
  value: MsgCreateOutboundTx,
};

type msgCreateCreatePoolParams = {
  value: MsgCreateCreatePool,
};

type msgCreateIssueTokenParams = {
  value: MsgCreateIssueToken,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateOutboundTx({ value, fee, memo }: sendMsgCreateOutboundTxParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateOutboundTx: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateOutboundTx({ value: MsgCreateOutboundTx.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateOutboundTx: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateCreatePool({ value, fee, memo }: sendMsgCreateCreatePoolParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateCreatePool: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateCreatePool({ value: MsgCreateCreatePool.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateCreatePool: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateIssueToken({ value, fee, memo }: sendMsgCreateIssueTokenParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateIssueToken: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateIssueToken({ value: MsgCreateIssueToken.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateIssueToken: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateOutboundTx({ value }: msgCreateOutboundTxParams): EncodeObject {
			try {
				return { typeUrl: "/oppyfinance.oppychain.vault.MsgCreateOutboundTx", value: MsgCreateOutboundTx.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateOutboundTx: Could not create message: ' + e.message)
			}
		},
		
		msgCreateCreatePool({ value }: msgCreateCreatePoolParams): EncodeObject {
			try {
				return { typeUrl: "/oppyfinance.oppychain.vault.MsgCreateCreatePool", value: MsgCreateCreatePool.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateCreatePool: Could not create message: ' + e.message)
			}
		},
		
		msgCreateIssueToken({ value }: msgCreateIssueTokenParams): EncodeObject {
			try {
				return { typeUrl: "/oppyfinance.oppychain.vault.MsgCreateIssueToken", value: MsgCreateIssueToken.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateIssueToken: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]>;

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });
		this.tx = txClient({ signer: client.signer, addr: client.env.rpcURL, prefix: client.env.prefix ?? "cosmos" });
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			OppyfinanceOppychainVault: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;